/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.fluorumlabs.dtrack.api;

import com.github.fluorumlabs.dtrack.ApiCallback;
import com.github.fluorumlabs.dtrack.ApiClient;
import com.github.fluorumlabs.dtrack.ApiException;
import com.github.fluorumlabs.dtrack.ApiResponse;
import com.github.fluorumlabs.dtrack.Configuration;
import com.github.fluorumlabs.dtrack.Pair;
import com.github.fluorumlabs.dtrack.ProgressRequestBody;
import com.github.fluorumlabs.dtrack.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.fluorumlabs.dtrack.model.BomSubmitRequest;
import com.github.fluorumlabs.dtrack.model.BomUploadResponse;
import com.github.fluorumlabs.dtrack.model.InvalidBomProblemDetails;
import com.github.fluorumlabs.dtrack.model.IsTokenBeingProcessedResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BomApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public BomApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BomApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for exportComponentAsCycloneDx
     * @param uuid The UUID of the component to export (required)
     * @param format The format to output (defaults to JSON) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportComponentAsCycloneDxCall(UUID uuid, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/bom/cyclonedx/component/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.cyclonedx+xml", "application/vnd.cyclonedx+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportComponentAsCycloneDxValidateBeforeCall(UUID uuid, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling exportComponentAsCycloneDx(Async)");
        }
        
        com.squareup.okhttp.Call call = exportComponentAsCycloneDxCall(uuid, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns dependency metadata for a specific component in CycloneDX format
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component to export (required)
     * @param format The format to output (defaults to JSON) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String exportComponentAsCycloneDx(UUID uuid, String format) throws ApiException {
        ApiResponse<String> resp = exportComponentAsCycloneDxWithHttpInfo(uuid, format);
        return resp.getData();
    }

    /**
     * Returns dependency metadata for a specific component in CycloneDX format
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component to export (required)
     * @param format The format to output (defaults to JSON) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> exportComponentAsCycloneDxWithHttpInfo(UUID uuid, String format) throws ApiException {
        com.squareup.okhttp.Call call = exportComponentAsCycloneDxValidateBeforeCall(uuid, format, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns dependency metadata for a specific component in CycloneDX format (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component to export (required)
     * @param format The format to output (defaults to JSON) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportComponentAsCycloneDxAsync(UUID uuid, String format, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportComponentAsCycloneDxValidateBeforeCall(uuid, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportProjectAsCycloneDx
     * @param uuid The UUID of the project to export (required)
     * @param format The format to output (defaults to JSON) (optional)
     * @param variant Specifies the CycloneDX variant to export. Value options are &#x27;inventory&#x27; and &#x27;withVulnerabilities&#x27;. (defaults to &#x27;inventory&#x27;) (optional)
     * @param download Force the resulting BOM to be downloaded as a file (defaults to &#x27;false&#x27;) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportProjectAsCycloneDxCall(UUID uuid, String format, String variant, Boolean download, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/bom/cyclonedx/project/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (variant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("variant", variant));
        if (download != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("download", download));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.cyclonedx+xml", "application/vnd.cyclonedx+json", "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportProjectAsCycloneDxValidateBeforeCall(UUID uuid, String format, String variant, Boolean download, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling exportProjectAsCycloneDx(Async)");
        }
        
        com.squareup.okhttp.Call call = exportProjectAsCycloneDxCall(uuid, format, variant, download, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns dependency metadata for a project in CycloneDX format
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to export (required)
     * @param format The format to output (defaults to JSON) (optional)
     * @param variant Specifies the CycloneDX variant to export. Value options are &#x27;inventory&#x27; and &#x27;withVulnerabilities&#x27;. (defaults to &#x27;inventory&#x27;) (optional)
     * @param download Force the resulting BOM to be downloaded as a file (defaults to &#x27;false&#x27;) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String exportProjectAsCycloneDx(UUID uuid, String format, String variant, Boolean download) throws ApiException {
        ApiResponse<String> resp = exportProjectAsCycloneDxWithHttpInfo(uuid, format, variant, download);
        return resp.getData();
    }

    /**
     * Returns dependency metadata for a project in CycloneDX format
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to export (required)
     * @param format The format to output (defaults to JSON) (optional)
     * @param variant Specifies the CycloneDX variant to export. Value options are &#x27;inventory&#x27; and &#x27;withVulnerabilities&#x27;. (defaults to &#x27;inventory&#x27;) (optional)
     * @param download Force the resulting BOM to be downloaded as a file (defaults to &#x27;false&#x27;) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> exportProjectAsCycloneDxWithHttpInfo(UUID uuid, String format, String variant, Boolean download) throws ApiException {
        com.squareup.okhttp.Call call = exportProjectAsCycloneDxValidateBeforeCall(uuid, format, variant, download, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns dependency metadata for a project in CycloneDX format (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to export (required)
     * @param format The format to output (defaults to JSON) (optional)
     * @param variant Specifies the CycloneDX variant to export. Value options are &#x27;inventory&#x27; and &#x27;withVulnerabilities&#x27;. (defaults to &#x27;inventory&#x27;) (optional)
     * @param download Force the resulting BOM to be downloaded as a file (defaults to &#x27;false&#x27;) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportProjectAsCycloneDxAsync(UUID uuid, String format, String variant, Boolean download, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportProjectAsCycloneDxValidateBeforeCall(uuid, format, variant, download, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for isTokenBeingProcessed
     * @param uuid The UUID of the token to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call isTokenBeingProcessedCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/bom/token/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call isTokenBeingProcessedValidateBeforeCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling isTokenBeingProcessed(Async)");
        }
        
        com.squareup.okhttp.Call call = isTokenBeingProcessedCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Determines if there are any tasks associated with the token that are being processed, or in the queue to be processed.
     * &lt;p&gt;   This endpoint is intended to be used in conjunction with uploading a supported BOM document.   Upon upload, a token will be returned. The token can then be queried using this endpoint to   determine if any tasks (such as vulnerability analysis) is being performed on the BOM:   &lt;ul&gt;     &lt;li&gt;A value of &lt;code&gt;true&lt;/code&gt; indicates processing is occurring.&lt;/li&gt;     &lt;li&gt;A value of &lt;code&gt;false&lt;/code&gt; indicates that no processing is occurring for the specified token.&lt;/li&gt;   &lt;/ul&gt;   However, a value of &lt;code&gt;false&lt;/code&gt; also does not confirm the token is valid,   only that no processing is associated with the specified token. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;BOM_UPLOAD&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use &lt;code&gt;/v1/event/token/{uuid}&lt;/code&gt; instead.&lt;/p&gt;
     * @param uuid The UUID of the token to query (required)
     * @return IsTokenBeingProcessedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IsTokenBeingProcessedResponse isTokenBeingProcessed(UUID uuid) throws ApiException {
        ApiResponse<IsTokenBeingProcessedResponse> resp = isTokenBeingProcessedWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Determines if there are any tasks associated with the token that are being processed, or in the queue to be processed.
     * &lt;p&gt;   This endpoint is intended to be used in conjunction with uploading a supported BOM document.   Upon upload, a token will be returned. The token can then be queried using this endpoint to   determine if any tasks (such as vulnerability analysis) is being performed on the BOM:   &lt;ul&gt;     &lt;li&gt;A value of &lt;code&gt;true&lt;/code&gt; indicates processing is occurring.&lt;/li&gt;     &lt;li&gt;A value of &lt;code&gt;false&lt;/code&gt; indicates that no processing is occurring for the specified token.&lt;/li&gt;   &lt;/ul&gt;   However, a value of &lt;code&gt;false&lt;/code&gt; also does not confirm the token is valid,   only that no processing is associated with the specified token. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;BOM_UPLOAD&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use &lt;code&gt;/v1/event/token/{uuid}&lt;/code&gt; instead.&lt;/p&gt;
     * @param uuid The UUID of the token to query (required)
     * @return ApiResponse&lt;IsTokenBeingProcessedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IsTokenBeingProcessedResponse> isTokenBeingProcessedWithHttpInfo(UUID uuid) throws ApiException {
        com.squareup.okhttp.Call call = isTokenBeingProcessedValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<IsTokenBeingProcessedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Determines if there are any tasks associated with the token that are being processed, or in the queue to be processed. (asynchronously)
     * &lt;p&gt;   This endpoint is intended to be used in conjunction with uploading a supported BOM document.   Upon upload, a token will be returned. The token can then be queried using this endpoint to   determine if any tasks (such as vulnerability analysis) is being performed on the BOM:   &lt;ul&gt;     &lt;li&gt;A value of &lt;code&gt;true&lt;/code&gt; indicates processing is occurring.&lt;/li&gt;     &lt;li&gt;A value of &lt;code&gt;false&lt;/code&gt; indicates that no processing is occurring for the specified token.&lt;/li&gt;   &lt;/ul&gt;   However, a value of &lt;code&gt;false&lt;/code&gt; also does not confirm the token is valid,   only that no processing is associated with the specified token. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;BOM_UPLOAD&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use &lt;code&gt;/v1/event/token/{uuid}&lt;/code&gt; instead.&lt;/p&gt;
     * @param uuid The UUID of the token to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call isTokenBeingProcessedAsync(UUID uuid, final ApiCallback<IsTokenBeingProcessedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = isTokenBeingProcessedValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IsTokenBeingProcessedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadBom
     * @param project  (optional)
     * @param autoCreate  (optional)
     * @param projectName  (optional)
     * @param projectVersion  (optional)
     * @param projectTags  (optional)
     * @param parentName  (optional)
     * @param parentVersion  (optional)
     * @param parentUUID  (optional)
     * @param isLatest  (optional)
     * @param bom  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadBomCall(String project, Boolean autoCreate, String projectName, String projectVersion, String projectTags, String parentName, String parentVersion, String parentUUID, Boolean isLatest, String bom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/bom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (project != null)
        localVarFormParams.put("project", project);
        if (autoCreate != null)
        localVarFormParams.put("autoCreate", autoCreate);
        if (projectName != null)
        localVarFormParams.put("projectName", projectName);
        if (projectVersion != null)
        localVarFormParams.put("projectVersion", projectVersion);
        if (projectTags != null)
        localVarFormParams.put("projectTags", projectTags);
        if (parentName != null)
        localVarFormParams.put("parentName", parentName);
        if (parentVersion != null)
        localVarFormParams.put("parentVersion", parentVersion);
        if (parentUUID != null)
        localVarFormParams.put("parentUUID", parentUUID);
        if (isLatest != null)
        localVarFormParams.put("isLatest", isLatest);
        if (bom != null)
        localVarFormParams.put("bom", bom);

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadBomValidateBeforeCall(String project, Boolean autoCreate, String projectName, String projectVersion, String projectTags, String parentName, String parentVersion, String parentUUID, Boolean isLatest, String bom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = uploadBomCall(project, autoCreate, projectName, projectVersion, projectTags, parentName, parentVersion, parentUUID, isLatest, bom, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload a supported bill of material format document
     * &lt;p&gt;    Expects CycloneDX and a valid project UUID. If a UUID is not specified,    then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified.    Optionally, if &lt;code&gt;autoCreate&lt;/code&gt; is specified and &lt;code&gt;true&lt;/code&gt; and the project does not exist,    the project will be created. In this scenario, the principal making the request will    additionally need the &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt; or    &lt;strong&gt;PROJECT_CREATION_UPLOAD&lt;/strong&gt; permission.  &lt;/p&gt;  &lt;p&gt;    The BOM will be validated against the CycloneDX schema. If schema validation fails,    a response with problem details in RFC 9457 format will be returned. In this case,    the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;.  &lt;/p&gt;  &lt;p&gt;Requires permission &lt;strong&gt;BOM_UPLOAD&lt;/strong&gt;&lt;/p&gt;
     * @param project  (optional)
     * @param autoCreate  (optional)
     * @param projectName  (optional)
     * @param projectVersion  (optional)
     * @param projectTags  (optional)
     * @param parentName  (optional)
     * @param parentVersion  (optional)
     * @param parentUUID  (optional)
     * @param isLatest  (optional)
     * @param bom  (optional)
     * @return BomUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BomUploadResponse uploadBom(String project, Boolean autoCreate, String projectName, String projectVersion, String projectTags, String parentName, String parentVersion, String parentUUID, Boolean isLatest, String bom) throws ApiException {
        ApiResponse<BomUploadResponse> resp = uploadBomWithHttpInfo(project, autoCreate, projectName, projectVersion, projectTags, parentName, parentVersion, parentUUID, isLatest, bom);
        return resp.getData();
    }

    /**
     * Upload a supported bill of material format document
     * &lt;p&gt;    Expects CycloneDX and a valid project UUID. If a UUID is not specified,    then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified.    Optionally, if &lt;code&gt;autoCreate&lt;/code&gt; is specified and &lt;code&gt;true&lt;/code&gt; and the project does not exist,    the project will be created. In this scenario, the principal making the request will    additionally need the &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt; or    &lt;strong&gt;PROJECT_CREATION_UPLOAD&lt;/strong&gt; permission.  &lt;/p&gt;  &lt;p&gt;    The BOM will be validated against the CycloneDX schema. If schema validation fails,    a response with problem details in RFC 9457 format will be returned. In this case,    the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;.  &lt;/p&gt;  &lt;p&gt;Requires permission &lt;strong&gt;BOM_UPLOAD&lt;/strong&gt;&lt;/p&gt;
     * @param project  (optional)
     * @param autoCreate  (optional)
     * @param projectName  (optional)
     * @param projectVersion  (optional)
     * @param projectTags  (optional)
     * @param parentName  (optional)
     * @param parentVersion  (optional)
     * @param parentUUID  (optional)
     * @param isLatest  (optional)
     * @param bom  (optional)
     * @return ApiResponse&lt;BomUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BomUploadResponse> uploadBomWithHttpInfo(String project, Boolean autoCreate, String projectName, String projectVersion, String projectTags, String parentName, String parentVersion, String parentUUID, Boolean isLatest, String bom) throws ApiException {
        com.squareup.okhttp.Call call = uploadBomValidateBeforeCall(project, autoCreate, projectName, projectVersion, projectTags, parentName, parentVersion, parentUUID, isLatest, bom, null, null);
        Type localVarReturnType = new TypeToken<BomUploadResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a supported bill of material format document (asynchronously)
     * &lt;p&gt;    Expects CycloneDX and a valid project UUID. If a UUID is not specified,    then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified.    Optionally, if &lt;code&gt;autoCreate&lt;/code&gt; is specified and &lt;code&gt;true&lt;/code&gt; and the project does not exist,    the project will be created. In this scenario, the principal making the request will    additionally need the &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt; or    &lt;strong&gt;PROJECT_CREATION_UPLOAD&lt;/strong&gt; permission.  &lt;/p&gt;  &lt;p&gt;    The BOM will be validated against the CycloneDX schema. If schema validation fails,    a response with problem details in RFC 9457 format will be returned. In this case,    the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;.  &lt;/p&gt;  &lt;p&gt;Requires permission &lt;strong&gt;BOM_UPLOAD&lt;/strong&gt;&lt;/p&gt;
     * @param project  (optional)
     * @param autoCreate  (optional)
     * @param projectName  (optional)
     * @param projectVersion  (optional)
     * @param projectTags  (optional)
     * @param parentName  (optional)
     * @param parentVersion  (optional)
     * @param parentUUID  (optional)
     * @param isLatest  (optional)
     * @param bom  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadBomAsync(String project, Boolean autoCreate, String projectName, String projectVersion, String projectTags, String parentName, String parentVersion, String parentUUID, Boolean isLatest, String bom, final ApiCallback<BomUploadResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadBomValidateBeforeCall(project, autoCreate, projectName, projectVersion, projectTags, parentName, parentVersion, parentUUID, isLatest, bom, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BomUploadResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadBomBase64Encoded
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadBomBase64EncodedCall(BomSubmitRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/bom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadBomBase64EncodedValidateBeforeCall(BomSubmitRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadBomBase64Encoded(Async)");
        }
        
        com.squareup.okhttp.Call call = uploadBomBase64EncodedCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload a supported bill of material format document
     * &lt;p&gt;   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified.   Optionally, if &lt;code&gt;autoCreate&lt;/code&gt; is specified and &lt;code&gt;true&lt;/code&gt; and the project does not exist,   the project will be created. In this scenario, the principal making the request will   additionally need the &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt; or   &lt;strong&gt;PROJECT_CREATION_UPLOAD&lt;/strong&gt; permission. &lt;/p&gt; &lt;p&gt;   The BOM will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;   The maximum allowed length of the &lt;code&gt;bom&lt;/code&gt; value is 20&#x27;000&#x27;000 characters.   When uploading large BOMs, the &lt;code&gt;POST&lt;/code&gt; endpoint is preferred,   as it does not have this limit. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;BOM_UPLOAD&lt;/strong&gt;&lt;/p&gt;
     * @param body  (required)
     * @return BomUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BomUploadResponse uploadBomBase64Encoded(BomSubmitRequest body) throws ApiException {
        ApiResponse<BomUploadResponse> resp = uploadBomBase64EncodedWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Upload a supported bill of material format document
     * &lt;p&gt;   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified.   Optionally, if &lt;code&gt;autoCreate&lt;/code&gt; is specified and &lt;code&gt;true&lt;/code&gt; and the project does not exist,   the project will be created. In this scenario, the principal making the request will   additionally need the &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt; or   &lt;strong&gt;PROJECT_CREATION_UPLOAD&lt;/strong&gt; permission. &lt;/p&gt; &lt;p&gt;   The BOM will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;   The maximum allowed length of the &lt;code&gt;bom&lt;/code&gt; value is 20&#x27;000&#x27;000 characters.   When uploading large BOMs, the &lt;code&gt;POST&lt;/code&gt; endpoint is preferred,   as it does not have this limit. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;BOM_UPLOAD&lt;/strong&gt;&lt;/p&gt;
     * @param body  (required)
     * @return ApiResponse&lt;BomUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BomUploadResponse> uploadBomBase64EncodedWithHttpInfo(BomSubmitRequest body) throws ApiException {
        com.squareup.okhttp.Call call = uploadBomBase64EncodedValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BomUploadResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a supported bill of material format document (asynchronously)
     * &lt;p&gt;   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified.   Optionally, if &lt;code&gt;autoCreate&lt;/code&gt; is specified and &lt;code&gt;true&lt;/code&gt; and the project does not exist,   the project will be created. In this scenario, the principal making the request will   additionally need the &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt; or   &lt;strong&gt;PROJECT_CREATION_UPLOAD&lt;/strong&gt; permission. &lt;/p&gt; &lt;p&gt;   The BOM will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;   The maximum allowed length of the &lt;code&gt;bom&lt;/code&gt; value is 20&#x27;000&#x27;000 characters.   When uploading large BOMs, the &lt;code&gt;POST&lt;/code&gt; endpoint is preferred,   as it does not have this limit. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;BOM_UPLOAD&lt;/strong&gt;&lt;/p&gt;
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadBomBase64EncodedAsync(BomSubmitRequest body, final ApiCallback<BomUploadResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadBomBase64EncodedValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BomUploadResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
