/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.fluorumlabs.dtrack.api;

import com.github.fluorumlabs.dtrack.ApiCallback;
import com.github.fluorumlabs.dtrack.ApiClient;
import com.github.fluorumlabs.dtrack.ApiException;
import com.github.fluorumlabs.dtrack.ApiResponse;
import com.github.fluorumlabs.dtrack.Configuration;
import com.github.fluorumlabs.dtrack.Pair;
import com.github.fluorumlabs.dtrack.ProgressRequestBody;
import com.github.fluorumlabs.dtrack.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.fluorumlabs.dtrack.model.Score;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalculatorApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public CalculatorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalculatorApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getCvssScores
     * @param vector A valid CVSSv2 or CVSSv3 vector (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCvssScoresCall(String vector, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/calculator/cvss";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vector != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vector", vector));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCvssScoresValidateBeforeCall(String vector, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vector' is set
        if (vector == null) {
            throw new ApiException("Missing the required parameter 'vector' when calling getCvssScores(Async)");
        }
        
        com.squareup.okhttp.Call call = getCvssScoresCall(vector, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the CVSS base score, impact sub-score and exploitability sub-score
     * 
     * @param vector A valid CVSSv2 or CVSSv3 vector (required)
     * @return Score
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Score getCvssScores(String vector) throws ApiException {
        ApiResponse<Score> resp = getCvssScoresWithHttpInfo(vector);
        return resp.getData();
    }

    /**
     * Returns the CVSS base score, impact sub-score and exploitability sub-score
     * 
     * @param vector A valid CVSSv2 or CVSSv3 vector (required)
     * @return ApiResponse&lt;Score&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Score> getCvssScoresWithHttpInfo(String vector) throws ApiException {
        com.squareup.okhttp.Call call = getCvssScoresValidateBeforeCall(vector, null, null);
        Type localVarReturnType = new TypeToken<Score>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the CVSS base score, impact sub-score and exploitability sub-score (asynchronously)
     * 
     * @param vector A valid CVSSv2 or CVSSv3 vector (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCvssScoresAsync(String vector, final ApiCallback<Score> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCvssScoresValidateBeforeCall(vector, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Score>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOwaspRRScores
     * @param vector A valid OWASP Risk Rating vector (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOwaspRRScoresCall(String vector, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/calculator/owasp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vector != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vector", vector));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOwaspRRScoresValidateBeforeCall(String vector, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vector' is set
        if (vector == null) {
            throw new ApiException("Missing the required parameter 'vector' when calling getOwaspRRScores(Async)");
        }
        
        com.squareup.okhttp.Call call = getOwaspRRScoresCall(vector, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the OWASP Risk Rating likelihood score, technical impact score and business impact score
     * 
     * @param vector A valid OWASP Risk Rating vector (required)
     * @return Score
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Score getOwaspRRScores(String vector) throws ApiException {
        ApiResponse<Score> resp = getOwaspRRScoresWithHttpInfo(vector);
        return resp.getData();
    }

    /**
     * Returns the OWASP Risk Rating likelihood score, technical impact score and business impact score
     * 
     * @param vector A valid OWASP Risk Rating vector (required)
     * @return ApiResponse&lt;Score&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Score> getOwaspRRScoresWithHttpInfo(String vector) throws ApiException {
        com.squareup.okhttp.Call call = getOwaspRRScoresValidateBeforeCall(vector, null, null);
        Type localVarReturnType = new TypeToken<Score>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the OWASP Risk Rating likelihood score, technical impact score and business impact score (asynchronously)
     * 
     * @param vector A valid OWASP Risk Rating vector (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOwaspRRScoresAsync(String vector, final ApiCallback<Score> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOwaspRRScoresValidateBeforeCall(vector, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Score>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
