/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.fluorumlabs.dtrack.api;

import com.github.fluorumlabs.dtrack.ApiCallback;
import com.github.fluorumlabs.dtrack.ApiClient;
import com.github.fluorumlabs.dtrack.ApiException;
import com.github.fluorumlabs.dtrack.ApiResponse;
import com.github.fluorumlabs.dtrack.Configuration;
import com.github.fluorumlabs.dtrack.Pair;
import com.github.fluorumlabs.dtrack.ProgressRequestBody;
import com.github.fluorumlabs.dtrack.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.fluorumlabs.dtrack.model.Component;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ComponentApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public ComponentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ComponentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for createComponent
     * @param uuid The UUID of the project to create a component for (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createComponentCall(UUID uuid, Component body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/component/project/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call createComponentValidateBeforeCall(UUID uuid, Component body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createComponent(Async)");
        }
        
        com.squareup.okhttp.Call call = createComponentCall(uuid, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new component
     * &lt;p&gt;Requires permission &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to create a component for (required)
     * @param body  (optional)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Component createComponent(UUID uuid, Component body) throws ApiException {
        ApiResponse<Component> resp = createComponentWithHttpInfo(uuid, body);
        return resp.getData();
    }

    /**
     * Creates a new component
     * &lt;p&gt;Requires permission &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to create a component for (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Component> createComponentWithHttpInfo(UUID uuid, Component body) throws ApiException {
        com.squareup.okhttp.Call call = createComponentValidateBeforeCall(uuid, body, null, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new component (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to create a component for (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createComponentAsync(UUID uuid, Component body, final ApiCallback<Component> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createComponentValidateBeforeCall(uuid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteComponent
     * @param uuid The UUID of the component to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteComponentCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/component/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call deleteComponentValidateBeforeCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteComponent(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteComponentCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a component
     * &lt;p&gt;Requires permission &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteComponent(UUID uuid) throws ApiException {
        deleteComponentWithHttpInfo(uuid);
    }

    /**
     * Deletes a component
     * &lt;p&gt;Requires permission &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteComponentWithHttpInfo(UUID uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteComponentValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a component (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteComponentAsync(UUID uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteComponentValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllComponents
     * @param uuid The UUID of the project to retrieve components for (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param onlyOutdated Optionally exclude recent components so only outdated components are returned (optional)
     * @param onlyDirect Optionally exclude transitive dependencies so only direct dependencies are returned (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllComponentsCall(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean onlyOutdated, Boolean onlyDirect, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/component/project/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortName", sortName));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (onlyOutdated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyOutdated", onlyOutdated));
        if (onlyDirect != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyDirect", onlyDirect));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getAllComponentsValidateBeforeCall(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean onlyOutdated, Boolean onlyDirect, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getAllComponents(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllComponentsCall(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, onlyOutdated, onlyDirect, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of all components for a given project
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to retrieve components for (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param onlyOutdated Optionally exclude recent components so only outdated components are returned (optional)
     * @param onlyDirect Optionally exclude transitive dependencies so only direct dependencies are returned (optional)
     * @return List&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Component> getAllComponents(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean onlyOutdated, Boolean onlyDirect) throws ApiException {
        ApiResponse<List<Component>> resp = getAllComponentsWithHttpInfo(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, onlyOutdated, onlyDirect);
        return resp.getData();
    }

    /**
     * Returns a list of all components for a given project
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to retrieve components for (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param onlyOutdated Optionally exclude recent components so only outdated components are returned (optional)
     * @param onlyDirect Optionally exclude transitive dependencies so only direct dependencies are returned (optional)
     * @return ApiResponse&lt;List&lt;Component&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Component>> getAllComponentsWithHttpInfo(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean onlyOutdated, Boolean onlyDirect) throws ApiException {
        com.squareup.okhttp.Call call = getAllComponentsValidateBeforeCall(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, onlyOutdated, onlyDirect, null, null);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of all components for a given project (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to retrieve components for (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param onlyOutdated Optionally exclude recent components so only outdated components are returned (optional)
     * @param onlyDirect Optionally exclude transitive dependencies so only direct dependencies are returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllComponentsAsync(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean onlyOutdated, Boolean onlyDirect, final ApiCallback<List<Component>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllComponentsValidateBeforeCall(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, onlyOutdated, onlyDirect, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComponentByHash
     * @param hash The MD5, SHA-1, SHA-256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, BLAKE2b-256, BLAKE2b-384, BLAKE2b-512, or BLAKE3 hash of the component to retrieve (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComponentByHashCall(String hash, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/component/hash/{hash}"
            .replaceAll("\\{" + "hash" + "\\}", apiClient.escapeString(hash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortName", sortName));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getComponentByHashValidateBeforeCall(String hash, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getComponentByHash(Async)");
        }
        
        com.squareup.okhttp.Call call = getComponentByHashCall(hash, pageNumber, pageSize, offset, limit, sortName, sortOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of components that have the specified hash value
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param hash The MD5, SHA-1, SHA-256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, BLAKE2b-256, BLAKE2b-384, BLAKE2b-512, or BLAKE3 hash of the component to retrieve (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @return List&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Component> getComponentByHash(String hash, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder) throws ApiException {
        ApiResponse<List<Component>> resp = getComponentByHashWithHttpInfo(hash, pageNumber, pageSize, offset, limit, sortName, sortOrder);
        return resp.getData();
    }

    /**
     * Returns a list of components that have the specified hash value
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param hash The MD5, SHA-1, SHA-256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, BLAKE2b-256, BLAKE2b-384, BLAKE2b-512, or BLAKE3 hash of the component to retrieve (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;List&lt;Component&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Component>> getComponentByHashWithHttpInfo(String hash, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = getComponentByHashValidateBeforeCall(hash, pageNumber, pageSize, offset, limit, sortName, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of components that have the specified hash value (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param hash The MD5, SHA-1, SHA-256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, BLAKE2b-256, BLAKE2b-384, BLAKE2b-512, or BLAKE3 hash of the component to retrieve (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComponentByHashAsync(String hash, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, final ApiCallback<List<Component>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComponentByHashValidateBeforeCall(hash, pageNumber, pageSize, offset, limit, sortName, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComponentByIdentity
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param group The group of the component (optional)
     * @param name The name of the component (optional)
     * @param version The version of the component (optional)
     * @param purl The purl of the component (optional)
     * @param cpe The cpe of the component (optional)
     * @param swidTagId The swidTagId of the component (optional)
     * @param project The project the component belongs to (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComponentByIdentityCall(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, String group, String name, String version, String purl, String cpe, String swidTagId, UUID project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/component/identity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortName", sortName));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (purl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("purl", purl));
        if (cpe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpe", cpe));
        if (swidTagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("swidTagId", swidTagId));
        if (project != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project", project));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getComponentByIdentityValidateBeforeCall(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, String group, String name, String version, String purl, String cpe, String swidTagId, UUID project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getComponentByIdentityCall(pageNumber, pageSize, offset, limit, sortName, sortOrder, group, name, version, purl, cpe, swidTagId, project, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of components that have the specified component identity. This resource accepts coordinates (group, name, version) or purl, cpe, or swidTagId
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param group The group of the component (optional)
     * @param name The name of the component (optional)
     * @param version The version of the component (optional)
     * @param purl The purl of the component (optional)
     * @param cpe The cpe of the component (optional)
     * @param swidTagId The swidTagId of the component (optional)
     * @param project The project the component belongs to (optional)
     * @return List&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Component> getComponentByIdentity(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, String group, String name, String version, String purl, String cpe, String swidTagId, UUID project) throws ApiException {
        ApiResponse<List<Component>> resp = getComponentByIdentityWithHttpInfo(pageNumber, pageSize, offset, limit, sortName, sortOrder, group, name, version, purl, cpe, swidTagId, project);
        return resp.getData();
    }

    /**
     * Returns a list of components that have the specified component identity. This resource accepts coordinates (group, name, version) or purl, cpe, or swidTagId
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param group The group of the component (optional)
     * @param name The name of the component (optional)
     * @param version The version of the component (optional)
     * @param purl The purl of the component (optional)
     * @param cpe The cpe of the component (optional)
     * @param swidTagId The swidTagId of the component (optional)
     * @param project The project the component belongs to (optional)
     * @return ApiResponse&lt;List&lt;Component&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Component>> getComponentByIdentityWithHttpInfo(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, String group, String name, String version, String purl, String cpe, String swidTagId, UUID project) throws ApiException {
        com.squareup.okhttp.Call call = getComponentByIdentityValidateBeforeCall(pageNumber, pageSize, offset, limit, sortName, sortOrder, group, name, version, purl, cpe, swidTagId, project, null, null);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of components that have the specified component identity. This resource accepts coordinates (group, name, version) or purl, cpe, or swidTagId (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param group The group of the component (optional)
     * @param name The name of the component (optional)
     * @param version The version of the component (optional)
     * @param purl The purl of the component (optional)
     * @param cpe The cpe of the component (optional)
     * @param swidTagId The swidTagId of the component (optional)
     * @param project The project the component belongs to (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComponentByIdentityAsync(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, String group, String name, String version, String purl, String cpe, String swidTagId, UUID project, final ApiCallback<List<Component>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComponentByIdentityValidateBeforeCall(pageNumber, pageSize, offset, limit, sortName, sortOrder, group, name, version, purl, cpe, swidTagId, project, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComponentByUuid
     * @param uuid The UUID of the component to retrieve (required)
     * @param includeRepositoryMetaData Optionally includes third-party metadata about the component from external repositories (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComponentByUuidCall(UUID uuid, Boolean includeRepositoryMetaData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/component/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeRepositoryMetaData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeRepositoryMetaData", includeRepositoryMetaData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getComponentByUuidValidateBeforeCall(UUID uuid, Boolean includeRepositoryMetaData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getComponentByUuid(Async)");
        }
        
        com.squareup.okhttp.Call call = getComponentByUuidCall(uuid, includeRepositoryMetaData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a specific component
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component to retrieve (required)
     * @param includeRepositoryMetaData Optionally includes third-party metadata about the component from external repositories (optional)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Component getComponentByUuid(UUID uuid, Boolean includeRepositoryMetaData) throws ApiException {
        ApiResponse<Component> resp = getComponentByUuidWithHttpInfo(uuid, includeRepositoryMetaData);
        return resp.getData();
    }

    /**
     * Returns a specific component
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component to retrieve (required)
     * @param includeRepositoryMetaData Optionally includes third-party metadata about the component from external repositories (optional)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Component> getComponentByUuidWithHttpInfo(UUID uuid, Boolean includeRepositoryMetaData) throws ApiException {
        com.squareup.okhttp.Call call = getComponentByUuidValidateBeforeCall(uuid, includeRepositoryMetaData, null, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific component (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component to retrieve (required)
     * @param includeRepositoryMetaData Optionally includes third-party metadata about the component from external repositories (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComponentByUuidAsync(UUID uuid, Boolean includeRepositoryMetaData, final ApiCallback<Component> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComponentByUuidValidateBeforeCall(uuid, includeRepositoryMetaData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDependencyGraphForComponent
     * @param projectUuid The UUID of the project to get the expanded dependency graph for (required)
     * @param componentUuids List of UUIDs of the components (separated by |) to get the expanded dependency graph for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDependencyGraphForComponentCall(UUID projectUuid, String componentUuids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/component/project/{projectUuid}/dependencyGraph/{componentUuids}"
            .replaceAll("\\{" + "projectUuid" + "\\}", apiClient.escapeString(projectUuid.toString()))
            .replaceAll("\\{" + "componentUuids" + "\\}", apiClient.escapeString(componentUuids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getDependencyGraphForComponentValidateBeforeCall(UUID projectUuid, String componentUuids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getDependencyGraphForComponent(Async)");
        }
        // verify the required parameter 'componentUuids' is set
        if (componentUuids == null) {
            throw new ApiException("Missing the required parameter 'componentUuids' when calling getDependencyGraphForComponent(Async)");
        }
        
        com.squareup.okhttp.Call call = getDependencyGraphForComponentCall(projectUuid, componentUuids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the expanded dependency graph to every occurrence of a component
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param projectUuid The UUID of the project to get the expanded dependency graph for (required)
     * @param componentUuids List of UUIDs of the components (separated by |) to get the expanded dependency graph for (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getDependencyGraphForComponent(UUID projectUuid, String componentUuids) throws ApiException {
        ApiResponse<Object> resp = getDependencyGraphForComponentWithHttpInfo(projectUuid, componentUuids);
        return resp.getData();
    }

    /**
     * Returns the expanded dependency graph to every occurrence of a component
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param projectUuid The UUID of the project to get the expanded dependency graph for (required)
     * @param componentUuids List of UUIDs of the components (separated by |) to get the expanded dependency graph for (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getDependencyGraphForComponentWithHttpInfo(UUID projectUuid, String componentUuids) throws ApiException {
        com.squareup.okhttp.Call call = getDependencyGraphForComponentValidateBeforeCall(projectUuid, componentUuids, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the expanded dependency graph to every occurrence of a component (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_PORTFOLIO&lt;/strong&gt;&lt;/p&gt;
     * @param projectUuid The UUID of the project to get the expanded dependency graph for (required)
     * @param componentUuids List of UUIDs of the components (separated by |) to get the expanded dependency graph for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDependencyGraphForComponentAsync(UUID projectUuid, String componentUuids, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDependencyGraphForComponentValidateBeforeCall(projectUuid, componentUuids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for identifyInternalComponents
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call identifyInternalComponentsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/component/internal/identify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call identifyInternalComponentsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = identifyInternalComponentsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Requests the identification of internal components in the portfolio
     * &lt;p&gt;Requires permission &lt;strong&gt;SYSTEM_CONFIGURATION&lt;/strong&gt;&lt;/p&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void identifyInternalComponents() throws ApiException {
        identifyInternalComponentsWithHttpInfo();
    }

    /**
     * Requests the identification of internal components in the portfolio
     * &lt;p&gt;Requires permission &lt;strong&gt;SYSTEM_CONFIGURATION&lt;/strong&gt;&lt;/p&gt;
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> identifyInternalComponentsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = identifyInternalComponentsValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Requests the identification of internal components in the portfolio (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;SYSTEM_CONFIGURATION&lt;/strong&gt;&lt;/p&gt;
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call identifyInternalComponentsAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = identifyInternalComponentsValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateComponent
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateComponentCall(Component body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/component";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call updateComponentValidateBeforeCall(Component body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = updateComponentCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a component
     * &lt;p&gt;Requires permission &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Component updateComponent(Component body) throws ApiException {
        ApiResponse<Component> resp = updateComponentWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Updates a component
     * &lt;p&gt;Requires permission &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Component> updateComponentWithHttpInfo(Component body) throws ApiException {
        com.squareup.okhttp.Call call = updateComponentValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a component (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;PORTFOLIO_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateComponentAsync(Component body, final ApiCallback<Component> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateComponentValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
