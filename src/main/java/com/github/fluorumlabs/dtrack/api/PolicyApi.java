/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.fluorumlabs.dtrack.api;

import com.github.fluorumlabs.dtrack.ApiCallback;
import com.github.fluorumlabs.dtrack.ApiClient;
import com.github.fluorumlabs.dtrack.ApiException;
import com.github.fluorumlabs.dtrack.ApiResponse;
import com.github.fluorumlabs.dtrack.Configuration;
import com.github.fluorumlabs.dtrack.Pair;
import com.github.fluorumlabs.dtrack.ProgressRequestBody;
import com.github.fluorumlabs.dtrack.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.fluorumlabs.dtrack.model.Policy;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolicyApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public PolicyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for addProjectToPolicy
     * @param policyUuid The UUID of the policy to add a project to (required)
     * @param projectUuid The UUID of the project to add to the rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addProjectToPolicyCall(UUID policyUuid, UUID projectUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/policy/{policyUuid}/project/{projectUuid}"
            .replaceAll("\\{" + "policyUuid" + "\\}", apiClient.escapeString(policyUuid.toString()))
            .replaceAll("\\{" + "projectUuid" + "\\}", apiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addProjectToPolicyValidateBeforeCall(UUID policyUuid, UUID projectUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling addProjectToPolicy(Async)");
        }
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling addProjectToPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = addProjectToPolicyCall(policyUuid, projectUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a project to a policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param policyUuid The UUID of the policy to add a project to (required)
     * @param projectUuid The UUID of the project to add to the rule (required)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy addProjectToPolicy(UUID policyUuid, UUID projectUuid) throws ApiException {
        ApiResponse<Policy> resp = addProjectToPolicyWithHttpInfo(policyUuid, projectUuid);
        return resp.getData();
    }

    /**
     * Adds a project to a policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param policyUuid The UUID of the policy to add a project to (required)
     * @param projectUuid The UUID of the project to add to the rule (required)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> addProjectToPolicyWithHttpInfo(UUID policyUuid, UUID projectUuid) throws ApiException {
        com.squareup.okhttp.Call call = addProjectToPolicyValidateBeforeCall(policyUuid, projectUuid, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a project to a policy (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param policyUuid The UUID of the policy to add a project to (required)
     * @param projectUuid The UUID of the project to add to the rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addProjectToPolicyAsync(UUID policyUuid, UUID projectUuid, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addProjectToPolicyValidateBeforeCall(policyUuid, projectUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addTagToPolicy
     * @param policyUuid The UUID of the policy to add a project to (required)
     * @param tagName The name of the tag to add to the rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTagToPolicyCall(UUID policyUuid, String tagName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/policy/{policyUuid}/tag/{tagName}"
            .replaceAll("\\{" + "policyUuid" + "\\}", apiClient.escapeString(policyUuid.toString()))
            .replaceAll("\\{" + "tagName" + "\\}", apiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTagToPolicyValidateBeforeCall(UUID policyUuid, String tagName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling addTagToPolicy(Async)");
        }
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling addTagToPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = addTagToPolicyCall(policyUuid, tagName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a tag to a policy
     * &lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use &lt;code&gt;POST /api/v1/tag/{name}/policy&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt; 
     * @param policyUuid The UUID of the policy to add a project to (required)
     * @param tagName The name of the tag to add to the rule (required)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy addTagToPolicy(UUID policyUuid, String tagName) throws ApiException {
        ApiResponse<Policy> resp = addTagToPolicyWithHttpInfo(policyUuid, tagName);
        return resp.getData();
    }

    /**
     * Adds a tag to a policy
     * &lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use &lt;code&gt;POST /api/v1/tag/{name}/policy&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt; 
     * @param policyUuid The UUID of the policy to add a project to (required)
     * @param tagName The name of the tag to add to the rule (required)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> addTagToPolicyWithHttpInfo(UUID policyUuid, String tagName) throws ApiException {
        com.squareup.okhttp.Call call = addTagToPolicyValidateBeforeCall(policyUuid, tagName, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a tag to a policy (asynchronously)
     * &lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use &lt;code&gt;POST /api/v1/tag/{name}/policy&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt; 
     * @param policyUuid The UUID of the policy to add a project to (required)
     * @param tagName The name of the tag to add to the rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTagToPolicyAsync(UUID policyUuid, String tagName, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTagToPolicyValidateBeforeCall(policyUuid, tagName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPolicy
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPolicyCall(Policy body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPolicyValidateBeforeCall(Policy body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = createPolicyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy createPolicy(Policy body) throws ApiException {
        ApiResponse<Policy> resp = createPolicyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a new policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> createPolicyWithHttpInfo(Policy body) throws ApiException {
        com.squareup.okhttp.Call call = createPolicyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new policy (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPolicyAsync(Policy body, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPolicyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePolicy
     * @param uuid The UUID of the policy to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePolicyCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/policy/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePolicyValidateBeforeCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deletePolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePolicyCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the policy to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePolicy(UUID uuid) throws ApiException {
        deletePolicyWithHttpInfo(uuid);
    }

    /**
     * Deletes a policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the policy to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePolicyWithHttpInfo(UUID uuid) throws ApiException {
        com.squareup.okhttp.Call call = deletePolicyValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a policy (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the policy to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePolicyAsync(UUID uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePolicyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPolicies
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPoliciesCall(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortName", sortName));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPoliciesValidateBeforeCall(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getPoliciesCall(pageNumber, pageSize, offset, limit, sortName, sortOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of all policies
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @return List&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Policy> getPolicies(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder) throws ApiException {
        ApiResponse<List<Policy>> resp = getPoliciesWithHttpInfo(pageNumber, pageSize, offset, limit, sortName, sortOrder);
        return resp.getData();
    }

    /**
     * Returns a list of all policies
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;List&lt;Policy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Policy>> getPoliciesWithHttpInfo(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = getPoliciesValidateBeforeCall(pageNumber, pageSize, offset, limit, sortName, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<List<Policy>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of all policies (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPoliciesAsync(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, final ApiCallback<List<Policy>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPoliciesValidateBeforeCall(pageNumber, pageSize, offset, limit, sortName, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Policy>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPolicy
     * @param uuid The UUID of the policy to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPolicyCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/policy/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPolicyValidateBeforeCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = getPolicyCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a specific policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the policy to retrieve (required)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy getPolicy(UUID uuid) throws ApiException {
        ApiResponse<Policy> resp = getPolicyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Returns a specific policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the policy to retrieve (required)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> getPolicyWithHttpInfo(UUID uuid) throws ApiException {
        com.squareup.okhttp.Call call = getPolicyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific policy (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the policy to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPolicyAsync(UUID uuid, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPolicyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeProjectFromPolicy
     * @param policyUuid The UUID of the policy to remove the project from (required)
     * @param projectUuid The UUID of the project to remove from the policy (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeProjectFromPolicyCall(UUID policyUuid, UUID projectUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/policy/{policyUuid}/project/{projectUuid}"
            .replaceAll("\\{" + "policyUuid" + "\\}", apiClient.escapeString(policyUuid.toString()))
            .replaceAll("\\{" + "projectUuid" + "\\}", apiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeProjectFromPolicyValidateBeforeCall(UUID policyUuid, UUID projectUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling removeProjectFromPolicy(Async)");
        }
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling removeProjectFromPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = removeProjectFromPolicyCall(policyUuid, projectUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes a project from a policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param policyUuid The UUID of the policy to remove the project from (required)
     * @param projectUuid The UUID of the project to remove from the policy (required)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy removeProjectFromPolicy(UUID policyUuid, UUID projectUuid) throws ApiException {
        ApiResponse<Policy> resp = removeProjectFromPolicyWithHttpInfo(policyUuid, projectUuid);
        return resp.getData();
    }

    /**
     * Removes a project from a policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param policyUuid The UUID of the policy to remove the project from (required)
     * @param projectUuid The UUID of the project to remove from the policy (required)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> removeProjectFromPolicyWithHttpInfo(UUID policyUuid, UUID projectUuid) throws ApiException {
        com.squareup.okhttp.Call call = removeProjectFromPolicyValidateBeforeCall(policyUuid, projectUuid, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes a project from a policy (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param policyUuid The UUID of the policy to remove the project from (required)
     * @param projectUuid The UUID of the project to remove from the policy (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeProjectFromPolicyAsync(UUID policyUuid, UUID projectUuid, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeProjectFromPolicyValidateBeforeCall(policyUuid, projectUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeTagFromPolicy
     * @param policyUuid The UUID of the policy to remove the tag from (required)
     * @param tagName The name of the tag to remove from the policy (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeTagFromPolicyCall(UUID policyUuid, String tagName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/policy/{policyUuid}/tag/{tagName}"
            .replaceAll("\\{" + "policyUuid" + "\\}", apiClient.escapeString(policyUuid.toString()))
            .replaceAll("\\{" + "tagName" + "\\}", apiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeTagFromPolicyValidateBeforeCall(UUID policyUuid, String tagName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling removeTagFromPolicy(Async)");
        }
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling removeTagFromPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = removeTagFromPolicyCall(policyUuid, tagName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes a tag from a policy
     * &lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use &lt;code&gt;DELETE /api/v1/tag/{name}/policy&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt; 
     * @param policyUuid The UUID of the policy to remove the tag from (required)
     * @param tagName The name of the tag to remove from the policy (required)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy removeTagFromPolicy(UUID policyUuid, String tagName) throws ApiException {
        ApiResponse<Policy> resp = removeTagFromPolicyWithHttpInfo(policyUuid, tagName);
        return resp.getData();
    }

    /**
     * Removes a tag from a policy
     * &lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use &lt;code&gt;DELETE /api/v1/tag/{name}/policy&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt; 
     * @param policyUuid The UUID of the policy to remove the tag from (required)
     * @param tagName The name of the tag to remove from the policy (required)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> removeTagFromPolicyWithHttpInfo(UUID policyUuid, String tagName) throws ApiException {
        com.squareup.okhttp.Call call = removeTagFromPolicyValidateBeforeCall(policyUuid, tagName, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes a tag from a policy (asynchronously)
     * &lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use &lt;code&gt;DELETE /api/v1/tag/{name}/policy&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt; 
     * @param policyUuid The UUID of the policy to remove the tag from (required)
     * @param tagName The name of the tag to remove from the policy (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTagFromPolicyAsync(UUID policyUuid, String tagName, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTagFromPolicyValidateBeforeCall(policyUuid, tagName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePolicy
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePolicyCall(Policy body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePolicyValidateBeforeCall(Policy body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = updatePolicyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy updatePolicy(Policy body) throws ApiException {
        ApiResponse<Policy> resp = updatePolicyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Updates a policy
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> updatePolicyWithHttpInfo(Policy body) throws ApiException {
        com.squareup.okhttp.Call call = updatePolicyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a policy (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;POLICY_MANAGEMENT&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePolicyAsync(Policy body, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePolicyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
