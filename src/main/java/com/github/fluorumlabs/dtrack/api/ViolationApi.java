/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.fluorumlabs.dtrack.api;

import com.github.fluorumlabs.dtrack.ApiCallback;
import com.github.fluorumlabs.dtrack.ApiClient;
import com.github.fluorumlabs.dtrack.ApiException;
import com.github.fluorumlabs.dtrack.ApiResponse;
import com.github.fluorumlabs.dtrack.Configuration;
import com.github.fluorumlabs.dtrack.Pair;
import com.github.fluorumlabs.dtrack.ProgressRequestBody;
import com.github.fluorumlabs.dtrack.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.fluorumlabs.dtrack.model.PolicyViolation;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ViolationApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public ViolationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ViolationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getViolations
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @param showInactive Optionally includes inactive projects (optional)
     * @param violationState Filter by violation state (optional)
     * @param riskType Filter by risk type (optional)
     * @param policy Filter by policy (optional)
     * @param analysisState Filter by analysis state (optional)
     * @param occurredOnDateFrom Filter occurred on from (optional)
     * @param occurredOnDateTo Filter occurred on to (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViolationsCall(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, Boolean showInactive, String violationState, String riskType, String policy, String analysisState, String occurredOnDateFrom, String occurredOnDateTo, String textSearchField, String textSearchInput, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/violation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortName", sortName));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (suppressed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("suppressed", suppressed));
        if (showInactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("showInactive", showInactive));
        if (violationState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("violationState", violationState));
        if (riskType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("riskType", riskType));
        if (policy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("policy", policy));
        if (analysisState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisState", analysisState));
        if (occurredOnDateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("occurredOnDateFrom", occurredOnDateFrom));
        if (occurredOnDateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("occurredOnDateTo", occurredOnDateTo));
        if (textSearchField != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("textSearchField", textSearchField));
        if (textSearchInput != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("textSearchInput", textSearchInput));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getViolationsValidateBeforeCall(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, Boolean showInactive, String violationState, String riskType, String policy, String analysisState, String occurredOnDateFrom, String occurredOnDateTo, String textSearchField, String textSearchInput, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getViolationsCall(pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed, showInactive, violationState, riskType, policy, analysisState, occurredOnDateFrom, occurredOnDateTo, textSearchField, textSearchInput, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of all policy violations for the entire portfolio
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_POLICY_VIOLATION&lt;/strong&gt;&lt;/p&gt;
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @param showInactive Optionally includes inactive projects (optional)
     * @param violationState Filter by violation state (optional)
     * @param riskType Filter by risk type (optional)
     * @param policy Filter by policy (optional)
     * @param analysisState Filter by analysis state (optional)
     * @param occurredOnDateFrom Filter occurred on from (optional)
     * @param occurredOnDateTo Filter occurred on to (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @return List&lt;PolicyViolation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PolicyViolation> getViolations(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, Boolean showInactive, String violationState, String riskType, String policy, String analysisState, String occurredOnDateFrom, String occurredOnDateTo, String textSearchField, String textSearchInput) throws ApiException {
        ApiResponse<List<PolicyViolation>> resp = getViolationsWithHttpInfo(pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed, showInactive, violationState, riskType, policy, analysisState, occurredOnDateFrom, occurredOnDateTo, textSearchField, textSearchInput);
        return resp.getData();
    }

    /**
     * Returns a list of all policy violations for the entire portfolio
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_POLICY_VIOLATION&lt;/strong&gt;&lt;/p&gt;
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @param showInactive Optionally includes inactive projects (optional)
     * @param violationState Filter by violation state (optional)
     * @param riskType Filter by risk type (optional)
     * @param policy Filter by policy (optional)
     * @param analysisState Filter by analysis state (optional)
     * @param occurredOnDateFrom Filter occurred on from (optional)
     * @param occurredOnDateTo Filter occurred on to (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @return ApiResponse&lt;List&lt;PolicyViolation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PolicyViolation>> getViolationsWithHttpInfo(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, Boolean showInactive, String violationState, String riskType, String policy, String analysisState, String occurredOnDateFrom, String occurredOnDateTo, String textSearchField, String textSearchInput) throws ApiException {
        com.squareup.okhttp.Call call = getViolationsValidateBeforeCall(pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed, showInactive, violationState, riskType, policy, analysisState, occurredOnDateFrom, occurredOnDateTo, textSearchField, textSearchInput, null, null);
        Type localVarReturnType = new TypeToken<List<PolicyViolation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of all policy violations for the entire portfolio (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_POLICY_VIOLATION&lt;/strong&gt;&lt;/p&gt;
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @param showInactive Optionally includes inactive projects (optional)
     * @param violationState Filter by violation state (optional)
     * @param riskType Filter by risk type (optional)
     * @param policy Filter by policy (optional)
     * @param analysisState Filter by analysis state (optional)
     * @param occurredOnDateFrom Filter occurred on from (optional)
     * @param occurredOnDateTo Filter occurred on to (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViolationsAsync(String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, Boolean showInactive, String violationState, String riskType, String policy, String analysisState, String occurredOnDateFrom, String occurredOnDateTo, String textSearchField, String textSearchInput, final ApiCallback<List<PolicyViolation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViolationsValidateBeforeCall(pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed, showInactive, violationState, riskType, policy, analysisState, occurredOnDateFrom, occurredOnDateTo, textSearchField, textSearchInput, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PolicyViolation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getViolationsByComponent
     * @param uuid The UUID of the component (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViolationsByComponentCall(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/violation/component/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortName", sortName));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (suppressed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("suppressed", suppressed));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getViolationsByComponentValidateBeforeCall(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getViolationsByComponent(Async)");
        }
        
        com.squareup.okhttp.Call call = getViolationsByComponentCall(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of all policy violations for a specific component
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_POLICY_VIOLATION&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @return List&lt;PolicyViolation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PolicyViolation> getViolationsByComponent(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed) throws ApiException {
        ApiResponse<List<PolicyViolation>> resp = getViolationsByComponentWithHttpInfo(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed);
        return resp.getData();
    }

    /**
     * Returns a list of all policy violations for a specific component
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_POLICY_VIOLATION&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @return ApiResponse&lt;List&lt;PolicyViolation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PolicyViolation>> getViolationsByComponentWithHttpInfo(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed) throws ApiException {
        com.squareup.okhttp.Call call = getViolationsByComponentValidateBeforeCall(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed, null, null);
        Type localVarReturnType = new TypeToken<List<PolicyViolation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of all policy violations for a specific component (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_POLICY_VIOLATION&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the component (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViolationsByComponentAsync(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, final ApiCallback<List<PolicyViolation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViolationsByComponentValidateBeforeCall(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PolicyViolation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getViolationsByProject
     * @param uuid The UUID of the project (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViolationsByProjectCall(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/violation/project/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortName", sortName));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (suppressed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("suppressed", suppressed));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getViolationsByProjectValidateBeforeCall(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getViolationsByProject(Async)");
        }
        
        com.squareup.okhttp.Call call = getViolationsByProjectCall(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of all policy violations for a specific project
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_POLICY_VIOLATION&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @return List&lt;PolicyViolation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PolicyViolation> getViolationsByProject(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed) throws ApiException {
        ApiResponse<List<PolicyViolation>> resp = getViolationsByProjectWithHttpInfo(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed);
        return resp.getData();
    }

    /**
     * Returns a list of all policy violations for a specific project
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_POLICY_VIOLATION&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @return ApiResponse&lt;List&lt;PolicyViolation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PolicyViolation>> getViolationsByProjectWithHttpInfo(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed) throws ApiException {
        com.squareup.okhttp.Call call = getViolationsByProjectValidateBeforeCall(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed, null, null);
        Type localVarReturnType = new TypeToken<List<PolicyViolation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of all policy violations for a specific project (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_POLICY_VIOLATION&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project (required)
     * @param pageNumber The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;. (optional, default to 1)
     * @param pageSize Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;. (optional, default to 100)
     * @param offset Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;. (optional)
     * @param limit Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;. (optional)
     * @param sortName Name of the resource field to sort on. (optional)
     * @param sortOrder Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;. (optional)
     * @param suppressed Optionally includes suppressed violations (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViolationsByProjectAsync(UUID uuid, String pageNumber, String pageSize, String offset, String limit, String sortName, String sortOrder, Boolean suppressed, final ApiCallback<List<PolicyViolation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViolationsByProjectValidateBeforeCall(uuid, pageNumber, pageSize, offset, limit, sortName, sortOrder, suppressed, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PolicyViolation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
