/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.fluorumlabs.dtrack.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Analysis
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-11T11:08:28.654737800+01:00[Europe/Berlin]")

public class Analysis {
  /**
   * Gets or Sets analysisState
   */
  @JsonAdapter(AnalysisStateEnum.Adapter.class)
  public enum AnalysisStateEnum {
    @SerializedName("EXPLOITABLE")
    EXPLOITABLE("EXPLOITABLE"),
    @SerializedName("IN_TRIAGE")
    IN_TRIAGE("IN_TRIAGE"),
    @SerializedName("FALSE_POSITIVE")
    FALSE_POSITIVE("FALSE_POSITIVE"),
    @SerializedName("NOT_AFFECTED")
    NOT_AFFECTED("NOT_AFFECTED"),
    @SerializedName("RESOLVED")
    RESOLVED("RESOLVED"),
    @SerializedName("NOT_SET")
    NOT_SET("NOT_SET");

    private String value;

    AnalysisStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AnalysisStateEnum fromValue(String input) {
      for (AnalysisStateEnum b : AnalysisStateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AnalysisStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisStateEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AnalysisStateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AnalysisStateEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("analysisState")
  private AnalysisStateEnum analysisState = null;

  /**
   * Gets or Sets analysisJustification
   */
  @JsonAdapter(AnalysisJustificationEnum.Adapter.class)
  public enum AnalysisJustificationEnum {
    @SerializedName("CODE_NOT_PRESENT")
    CODE_NOT_PRESENT("CODE_NOT_PRESENT"),
    @SerializedName("CODE_NOT_REACHABLE")
    CODE_NOT_REACHABLE("CODE_NOT_REACHABLE"),
    @SerializedName("REQUIRES_CONFIGURATION")
    REQUIRES_CONFIGURATION("REQUIRES_CONFIGURATION"),
    @SerializedName("REQUIRES_DEPENDENCY")
    REQUIRES_DEPENDENCY("REQUIRES_DEPENDENCY"),
    @SerializedName("REQUIRES_ENVIRONMENT")
    REQUIRES_ENVIRONMENT("REQUIRES_ENVIRONMENT"),
    @SerializedName("PROTECTED_BY_COMPILER")
    PROTECTED_BY_COMPILER("PROTECTED_BY_COMPILER"),
    @SerializedName("PROTECTED_AT_RUNTIME")
    PROTECTED_AT_RUNTIME("PROTECTED_AT_RUNTIME"),
    @SerializedName("PROTECTED_AT_PERIMETER")
    PROTECTED_AT_PERIMETER("PROTECTED_AT_PERIMETER"),
    @SerializedName("PROTECTED_BY_MITIGATING_CONTROL")
    PROTECTED_BY_MITIGATING_CONTROL("PROTECTED_BY_MITIGATING_CONTROL"),
    @SerializedName("NOT_SET")
    NOT_SET("NOT_SET");

    private String value;

    AnalysisJustificationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AnalysisJustificationEnum fromValue(String input) {
      for (AnalysisJustificationEnum b : AnalysisJustificationEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AnalysisJustificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisJustificationEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AnalysisJustificationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AnalysisJustificationEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("analysisJustification")
  private AnalysisJustificationEnum analysisJustification = null;

  /**
   * Gets or Sets analysisResponse
   */
  @JsonAdapter(AnalysisResponseEnum.Adapter.class)
  public enum AnalysisResponseEnum {
    @SerializedName("CAN_NOT_FIX")
    CAN_NOT_FIX("CAN_NOT_FIX"),
    @SerializedName("WILL_NOT_FIX")
    WILL_NOT_FIX("WILL_NOT_FIX"),
    @SerializedName("UPDATE")
    UPDATE("UPDATE"),
    @SerializedName("ROLLBACK")
    ROLLBACK("ROLLBACK"),
    @SerializedName("WORKAROUND_AVAILABLE")
    WORKAROUND_AVAILABLE("WORKAROUND_AVAILABLE"),
    @SerializedName("NOT_SET")
    NOT_SET("NOT_SET");

    private String value;

    AnalysisResponseEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AnalysisResponseEnum fromValue(String input) {
      for (AnalysisResponseEnum b : AnalysisResponseEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AnalysisResponseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisResponseEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AnalysisResponseEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AnalysisResponseEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("analysisResponse")
  private AnalysisResponseEnum analysisResponse = null;

  @SerializedName("analysisDetails")
  private String analysisDetails = null;

  @SerializedName("analysisComments")
  private List<AnalysisComment> analysisComments = null;

  @SerializedName("isSuppressed")
  private Boolean isSuppressed = null;

  public Analysis analysisState(AnalysisStateEnum analysisState) {
    this.analysisState = analysisState;
    return this;
  }

   /**
   * Get analysisState
   * @return analysisState
  **/
  @Schema(required = true, description = "")
  public AnalysisStateEnum getAnalysisState() {
    return analysisState;
  }

  public void setAnalysisState(AnalysisStateEnum analysisState) {
    this.analysisState = analysisState;
  }

  public Analysis analysisJustification(AnalysisJustificationEnum analysisJustification) {
    this.analysisJustification = analysisJustification;
    return this;
  }

   /**
   * Get analysisJustification
   * @return analysisJustification
  **/
  @Schema(required = true, description = "")
  public AnalysisJustificationEnum getAnalysisJustification() {
    return analysisJustification;
  }

  public void setAnalysisJustification(AnalysisJustificationEnum analysisJustification) {
    this.analysisJustification = analysisJustification;
  }

  public Analysis analysisResponse(AnalysisResponseEnum analysisResponse) {
    this.analysisResponse = analysisResponse;
    return this;
  }

   /**
   * Get analysisResponse
   * @return analysisResponse
  **/
  @Schema(required = true, description = "")
  public AnalysisResponseEnum getAnalysisResponse() {
    return analysisResponse;
  }

  public void setAnalysisResponse(AnalysisResponseEnum analysisResponse) {
    this.analysisResponse = analysisResponse;
  }

  public Analysis analysisDetails(String analysisDetails) {
    this.analysisDetails = analysisDetails;
    return this;
  }

   /**
   * Get analysisDetails
   * @return analysisDetails
  **/
  @Schema(required = true, description = "")
  public String getAnalysisDetails() {
    return analysisDetails;
  }

  public void setAnalysisDetails(String analysisDetails) {
    this.analysisDetails = analysisDetails;
  }

  public Analysis analysisComments(List<AnalysisComment> analysisComments) {
    this.analysisComments = analysisComments;
    return this;
  }

  public Analysis addAnalysisCommentsItem(AnalysisComment analysisCommentsItem) {
    if (this.analysisComments == null) {
      this.analysisComments = new ArrayList<AnalysisComment>();
    }
    this.analysisComments.add(analysisCommentsItem);
    return this;
  }

   /**
   * Get analysisComments
   * @return analysisComments
  **/
  @Schema(description = "")
  public List<AnalysisComment> getAnalysisComments() {
    return analysisComments;
  }

  public void setAnalysisComments(List<AnalysisComment> analysisComments) {
    this.analysisComments = analysisComments;
  }

  public Analysis isSuppressed(Boolean isSuppressed) {
    this.isSuppressed = isSuppressed;
    return this;
  }

   /**
   * Get isSuppressed
   * @return isSuppressed
  **/
  @Schema(description = "")
  public Boolean isIsSuppressed() {
    return isSuppressed;
  }

  public void setIsSuppressed(Boolean isSuppressed) {
    this.isSuppressed = isSuppressed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Analysis analysis = (Analysis) o;
    return Objects.equals(this.analysisState, analysis.analysisState) &&
        Objects.equals(this.analysisJustification, analysis.analysisJustification) &&
        Objects.equals(this.analysisResponse, analysis.analysisResponse) &&
        Objects.equals(this.analysisDetails, analysis.analysisDetails) &&
        Objects.equals(this.analysisComments, analysis.analysisComments) &&
        Objects.equals(this.isSuppressed, analysis.isSuppressed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisState, analysisJustification, analysisResponse, analysisDetails, analysisComments, isSuppressed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Analysis {\n");
    
    sb.append("    analysisState: ").append(toIndentedString(analysisState)).append("\n");
    sb.append("    analysisJustification: ").append(toIndentedString(analysisJustification)).append("\n");
    sb.append("    analysisResponse: ").append(toIndentedString(analysisResponse)).append("\n");
    sb.append("    analysisDetails: ").append(toIndentedString(analysisDetails)).append("\n");
    sb.append("    analysisComments: ").append(toIndentedString(analysisComments)).append("\n");
    sb.append("    isSuppressed: ").append(toIndentedString(isSuppressed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
