/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.fluorumlabs.dtrack.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.threeten.bp.OffsetDateTime;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * ManagedUser
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-11T11:08:28.654737800+01:00[Europe/Berlin]")

public class ManagedUser {
  @SerializedName("username")
  private String username = null;

  @SerializedName("lastPasswordChange")
  private OffsetDateTime lastPasswordChange = null;

  @SerializedName("fullname")
  private String fullname = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("suspended")
  private Boolean suspended = null;

  @SerializedName("forcePasswordChange")
  private Boolean forcePasswordChange = null;

  @SerializedName("nonExpiryPassword")
  private Boolean nonExpiryPassword = null;

  @SerializedName("teams")
  private List<Team> teams = null;

  @SerializedName("permissions")
  private List<Permission> permissions = null;

  @SerializedName("newPassword")
  private String newPassword = null;

  @SerializedName("confirmPassword")
  private String confirmPassword = null;

  public ManagedUser username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(required = true, description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public ManagedUser lastPasswordChange(OffsetDateTime lastPasswordChange) {
    this.lastPasswordChange = lastPasswordChange;
    return this;
  }

   /**
   * Get lastPasswordChange
   * @return lastPasswordChange
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getLastPasswordChange() {
    return lastPasswordChange;
  }

  public void setLastPasswordChange(OffsetDateTime lastPasswordChange) {
    this.lastPasswordChange = lastPasswordChange;
  }

  public ManagedUser fullname(String fullname) {
    this.fullname = fullname;
    return this;
  }

   /**
   * Get fullname
   * @return fullname
  **/
  @Schema(description = "")
  public String getFullname() {
    return fullname;
  }

  public void setFullname(String fullname) {
    this.fullname = fullname;
  }

  public ManagedUser email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(description = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public ManagedUser suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

   /**
   * Get suspended
   * @return suspended
  **/
  @Schema(description = "")
  public Boolean isSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }

  public ManagedUser forcePasswordChange(Boolean forcePasswordChange) {
    this.forcePasswordChange = forcePasswordChange;
    return this;
  }

   /**
   * Get forcePasswordChange
   * @return forcePasswordChange
  **/
  @Schema(description = "")
  public Boolean isForcePasswordChange() {
    return forcePasswordChange;
  }

  public void setForcePasswordChange(Boolean forcePasswordChange) {
    this.forcePasswordChange = forcePasswordChange;
  }

  public ManagedUser nonExpiryPassword(Boolean nonExpiryPassword) {
    this.nonExpiryPassword = nonExpiryPassword;
    return this;
  }

   /**
   * Get nonExpiryPassword
   * @return nonExpiryPassword
  **/
  @Schema(description = "")
  public Boolean isNonExpiryPassword() {
    return nonExpiryPassword;
  }

  public void setNonExpiryPassword(Boolean nonExpiryPassword) {
    this.nonExpiryPassword = nonExpiryPassword;
  }

  public ManagedUser teams(List<Team> teams) {
    this.teams = teams;
    return this;
  }

  public ManagedUser addTeamsItem(Team teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<Team>();
    }
    this.teams.add(teamsItem);
    return this;
  }

   /**
   * Get teams
   * @return teams
  **/
  @Schema(description = "")
  public List<Team> getTeams() {
    return teams;
  }

  public void setTeams(List<Team> teams) {
    this.teams = teams;
  }

  public ManagedUser permissions(List<Permission> permissions) {
    this.permissions = permissions;
    return this;
  }

  public ManagedUser addPermissionsItem(Permission permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<Permission>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @Schema(description = "")
  public List<Permission> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<Permission> permissions) {
    this.permissions = permissions;
  }

  public ManagedUser newPassword(String newPassword) {
    this.newPassword = newPassword;
    return this;
  }

   /**
   * Get newPassword
   * @return newPassword
  **/
  @Schema(description = "")
  public String getNewPassword() {
    return newPassword;
  }

  public void setNewPassword(String newPassword) {
    this.newPassword = newPassword;
  }

  public ManagedUser confirmPassword(String confirmPassword) {
    this.confirmPassword = confirmPassword;
    return this;
  }

   /**
   * Get confirmPassword
   * @return confirmPassword
  **/
  @Schema(description = "")
  public String getConfirmPassword() {
    return confirmPassword;
  }

  public void setConfirmPassword(String confirmPassword) {
    this.confirmPassword = confirmPassword;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedUser managedUser = (ManagedUser) o;
    return Objects.equals(this.username, managedUser.username) &&
        Objects.equals(this.lastPasswordChange, managedUser.lastPasswordChange) &&
        Objects.equals(this.fullname, managedUser.fullname) &&
        Objects.equals(this.email, managedUser.email) &&
        Objects.equals(this.suspended, managedUser.suspended) &&
        Objects.equals(this.forcePasswordChange, managedUser.forcePasswordChange) &&
        Objects.equals(this.nonExpiryPassword, managedUser.nonExpiryPassword) &&
        Objects.equals(this.teams, managedUser.teams) &&
        Objects.equals(this.permissions, managedUser.permissions) &&
        Objects.equals(this.newPassword, managedUser.newPassword) &&
        Objects.equals(this.confirmPassword, managedUser.confirmPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, lastPasswordChange, fullname, email, suspended, forcePasswordChange, nonExpiryPassword, teams, permissions, newPassword, confirmPassword);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedUser {\n");
    
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    lastPasswordChange: ").append(toIndentedString(lastPasswordChange)).append("\n");
    sb.append("    fullname: ").append(toIndentedString(fullname)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    forcePasswordChange: ").append(toIndentedString(forcePasswordChange)).append("\n");
    sb.append("    nonExpiryPassword: ").append(toIndentedString(nonExpiryPassword)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("    confirmPassword: ").append(toIndentedString(confirmPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
