/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.fluorumlabs.dtrack.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * NotificationRule
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-11T11:08:28.654737800+01:00[Europe/Berlin]")

public class NotificationRule {
  @SerializedName("name")
  private String name = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("notifyChildren")
  private Boolean notifyChildren = null;

  @SerializedName("logSuccessfulPublish")
  private Boolean logSuccessfulPublish = null;

  /**
   * Gets or Sets scope
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    @SerializedName("SYSTEM")
    SYSTEM("SYSTEM"),
    @SerializedName("PORTFOLIO")
    PORTFOLIO("PORTFOLIO");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScopeEnum fromValue(String input) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScopeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("scope")
  private ScopeEnum scope = null;

  /**
   * Gets or Sets notificationLevel
   */
  @JsonAdapter(NotificationLevelEnum.Adapter.class)
  public enum NotificationLevelEnum {
    @SerializedName("INFORMATIONAL")
    INFORMATIONAL("INFORMATIONAL"),
    @SerializedName("WARNING")
    WARNING("WARNING"),
    @SerializedName("ERROR")
    ERROR("ERROR");

    private String value;

    NotificationLevelEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NotificationLevelEnum fromValue(String input) {
      for (NotificationLevelEnum b : NotificationLevelEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NotificationLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotificationLevelEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public NotificationLevelEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NotificationLevelEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("notificationLevel")
  private NotificationLevelEnum notificationLevel = null;

  @SerializedName("projects")
  private List<Project> projects = null;

  @SerializedName("tags")
  private List<Tag> tags = null;

  @SerializedName("teams")
  private List<Team> teams = null;

  /**
   * Gets or Sets notifyOn
   */
  @JsonAdapter(NotifyOnEnum.Adapter.class)
  public enum NotifyOnEnum {
    @SerializedName("CONFIGURATION")
    CONFIGURATION("CONFIGURATION"),
    @SerializedName("DATASOURCE_MIRRORING")
    DATASOURCE_MIRRORING("DATASOURCE_MIRRORING"),
    @SerializedName("REPOSITORY")
    REPOSITORY("REPOSITORY"),
    @SerializedName("INTEGRATION")
    INTEGRATION("INTEGRATION"),
    @SerializedName("INDEXING_SERVICE")
    INDEXING_SERVICE("INDEXING_SERVICE"),
    @SerializedName("FILE_SYSTEM")
    FILE_SYSTEM("FILE_SYSTEM"),
    @SerializedName("ANALYZER")
    ANALYZER("ANALYZER"),
    @SerializedName("NEW_VULNERABILITY")
    NEW_VULNERABILITY("NEW_VULNERABILITY"),
    @SerializedName("NEW_VULNERABLE_DEPENDENCY")
    NEW_VULNERABLE_DEPENDENCY("NEW_VULNERABLE_DEPENDENCY"),
    @SerializedName("PROJECT_AUDIT_CHANGE")
    PROJECT_AUDIT_CHANGE("PROJECT_AUDIT_CHANGE"),
    @SerializedName("BOM_CONSUMED")
    BOM_CONSUMED("BOM_CONSUMED"),
    @SerializedName("BOM_PROCESSED")
    BOM_PROCESSED("BOM_PROCESSED"),
    @SerializedName("BOM_PROCESSING_FAILED")
    BOM_PROCESSING_FAILED("BOM_PROCESSING_FAILED"),
    @SerializedName("BOM_VALIDATION_FAILED")
    BOM_VALIDATION_FAILED("BOM_VALIDATION_FAILED"),
    @SerializedName("VEX_CONSUMED")
    VEX_CONSUMED("VEX_CONSUMED"),
    @SerializedName("VEX_PROCESSED")
    VEX_PROCESSED("VEX_PROCESSED"),
    @SerializedName("POLICY_VIOLATION")
    POLICY_VIOLATION("POLICY_VIOLATION"),
    @SerializedName("PROJECT_CREATED")
    PROJECT_CREATED("PROJECT_CREATED"),
    @SerializedName("USER_CREATED")
    USER_CREATED("USER_CREATED"),
    @SerializedName("USER_DELETED")
    USER_DELETED("USER_DELETED");

    private String value;

    NotifyOnEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NotifyOnEnum fromValue(String input) {
      for (NotifyOnEnum b : NotifyOnEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NotifyOnEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotifyOnEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public NotifyOnEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NotifyOnEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("notifyOn")
  private List<NotifyOnEnum> notifyOn = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("publisher")
  private NotificationPublisher publisher = null;

  @SerializedName("publisherConfig")
  private String publisherConfig = null;

  @SerializedName("uuid")
  private UUID uuid = null;

  public NotificationRule name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NotificationRule enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(description = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public NotificationRule notifyChildren(Boolean notifyChildren) {
    this.notifyChildren = notifyChildren;
    return this;
  }

   /**
   * Get notifyChildren
   * @return notifyChildren
  **/
  @Schema(description = "")
  public Boolean isNotifyChildren() {
    return notifyChildren;
  }

  public void setNotifyChildren(Boolean notifyChildren) {
    this.notifyChildren = notifyChildren;
  }

  public NotificationRule logSuccessfulPublish(Boolean logSuccessfulPublish) {
    this.logSuccessfulPublish = logSuccessfulPublish;
    return this;
  }

   /**
   * Get logSuccessfulPublish
   * @return logSuccessfulPublish
  **/
  @Schema(description = "")
  public Boolean isLogSuccessfulPublish() {
    return logSuccessfulPublish;
  }

  public void setLogSuccessfulPublish(Boolean logSuccessfulPublish) {
    this.logSuccessfulPublish = logSuccessfulPublish;
  }

  public NotificationRule scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @Schema(required = true, description = "")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public NotificationRule notificationLevel(NotificationLevelEnum notificationLevel) {
    this.notificationLevel = notificationLevel;
    return this;
  }

   /**
   * Get notificationLevel
   * @return notificationLevel
  **/
  @Schema(description = "")
  public NotificationLevelEnum getNotificationLevel() {
    return notificationLevel;
  }

  public void setNotificationLevel(NotificationLevelEnum notificationLevel) {
    this.notificationLevel = notificationLevel;
  }

  public NotificationRule projects(List<Project> projects) {
    this.projects = projects;
    return this;
  }

  public NotificationRule addProjectsItem(Project projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<Project>();
    }
    this.projects.add(projectsItem);
    return this;
  }

   /**
   * Get projects
   * @return projects
  **/
  @Schema(description = "")
  public List<Project> getProjects() {
    return projects;
  }

  public void setProjects(List<Project> projects) {
    this.projects = projects;
  }

  public NotificationRule tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public NotificationRule addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  public NotificationRule teams(List<Team> teams) {
    this.teams = teams;
    return this;
  }

  public NotificationRule addTeamsItem(Team teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<Team>();
    }
    this.teams.add(teamsItem);
    return this;
  }

   /**
   * Get teams
   * @return teams
  **/
  @Schema(description = "")
  public List<Team> getTeams() {
    return teams;
  }

  public void setTeams(List<Team> teams) {
    this.teams = teams;
  }

  public NotificationRule notifyOn(List<NotifyOnEnum> notifyOn) {
    this.notifyOn = notifyOn;
    return this;
  }

  public NotificationRule addNotifyOnItem(NotifyOnEnum notifyOnItem) {
    if (this.notifyOn == null) {
      this.notifyOn = new ArrayList<NotifyOnEnum>();
    }
    this.notifyOn.add(notifyOnItem);
    return this;
  }

   /**
   * Get notifyOn
   * @return notifyOn
  **/
  @Schema(description = "")
  public List<NotifyOnEnum> getNotifyOn() {
    return notifyOn;
  }

  public void setNotifyOn(List<NotifyOnEnum> notifyOn) {
    this.notifyOn = notifyOn;
  }

  public NotificationRule message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public NotificationRule publisher(NotificationPublisher publisher) {
    this.publisher = publisher;
    return this;
  }

   /**
   * Get publisher
   * @return publisher
  **/
  @Schema(description = "")
  public NotificationPublisher getPublisher() {
    return publisher;
  }

  public void setPublisher(NotificationPublisher publisher) {
    this.publisher = publisher;
  }

  public NotificationRule publisherConfig(String publisherConfig) {
    this.publisherConfig = publisherConfig;
    return this;
  }

   /**
   * Get publisherConfig
   * @return publisherConfig
  **/
  @Schema(description = "")
  public String getPublisherConfig() {
    return publisherConfig;
  }

  public void setPublisherConfig(String publisherConfig) {
    this.publisherConfig = publisherConfig;
  }

  public NotificationRule uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(required = true, description = "")
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationRule notificationRule = (NotificationRule) o;
    return Objects.equals(this.name, notificationRule.name) &&
        Objects.equals(this.enabled, notificationRule.enabled) &&
        Objects.equals(this.notifyChildren, notificationRule.notifyChildren) &&
        Objects.equals(this.logSuccessfulPublish, notificationRule.logSuccessfulPublish) &&
        Objects.equals(this.scope, notificationRule.scope) &&
        Objects.equals(this.notificationLevel, notificationRule.notificationLevel) &&
        Objects.equals(this.projects, notificationRule.projects) &&
        Objects.equals(this.tags, notificationRule.tags) &&
        Objects.equals(this.teams, notificationRule.teams) &&
        Objects.equals(this.notifyOn, notificationRule.notifyOn) &&
        Objects.equals(this.message, notificationRule.message) &&
        Objects.equals(this.publisher, notificationRule.publisher) &&
        Objects.equals(this.publisherConfig, notificationRule.publisherConfig) &&
        Objects.equals(this.uuid, notificationRule.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, enabled, notifyChildren, logSuccessfulPublish, scope, notificationLevel, projects, tags, teams, notifyOn, message, publisher, publisherConfig, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationRule {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    notifyChildren: ").append(toIndentedString(notifyChildren)).append("\n");
    sb.append("    logSuccessfulPublish: ").append(toIndentedString(logSuccessfulPublish)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    notificationLevel: ").append(toIndentedString(notificationLevel)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    notifyOn: ").append(toIndentedString(notifyOn)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    publisherConfig: ").append(toIndentedString(publisherConfig)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
