/*
 * Copyright 2021 Artem Godin.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Dependency-Track API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.fluorumlabs.dtrack.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.fluorumlabs.dtrack.model.Policy;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * PolicyCondition
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-21T09:42:21.596Z")
public class PolicyCondition {
  @SerializedName("policy")
  private Policy policy = null;

  /**
   * Gets or Sets operator
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    IS("IS"),
    
    IS_NOT("IS_NOT"),
    
    MATCHES("MATCHES"),
    
    NO_MATCH("NO_MATCH"),
    
    NUMERIC_GREATER_THAN("NUMERIC_GREATER_THAN"),
    
    NUMERIC_LESS_THAN("NUMERIC_LESS_THAN"),
    
    NUMERIC_EQUAL("NUMERIC_EQUAL"),
    
    NUMERIC_NOT_EQUAL("NUMERIC_NOT_EQUAL"),
    
    NUMERIC_GREATER_THAN_OR_EQUAL("NUMERIC_GREATER_THAN_OR_EQUAL"),
    
    NUMERIC_LESSER_THAN_OR_EQUAL("NUMERIC_LESSER_THAN_OR_EQUAL");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String text) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperatorEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("operator")
  private OperatorEnum operator = null;

  /**
   * Gets or Sets subject
   */
  @JsonAdapter(SubjectEnum.Adapter.class)
  public enum SubjectEnum {
    COORDINATES("COORDINATES"),
    
    CPE("CPE"),
    
    LICENSE("LICENSE"),
    
    LICENSE_GROUP("LICENSE_GROUP"),
    
    PACKAGE_URL("PACKAGE_URL"),
    
    SEVERITY("SEVERITY"),
    
    SWID_TAGID("SWID_TAGID"),
    
    VERSION("VERSION");

    private String value;

    SubjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubjectEnum fromValue(String text) {
      for (SubjectEnum b : SubjectEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SubjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubjectEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SubjectEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("subject")
  private SubjectEnum subject = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("uuid")
  private UUID uuid = null;

  public PolicyCondition policy(Policy policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @ApiModelProperty(value = "")
  public Policy getPolicy() {
    return policy;
  }

  public void setPolicy(Policy policy) {
    this.policy = policy;
  }

  public PolicyCondition operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

   /**
   * Get operator
   * @return operator
  **/
  @ApiModelProperty(value = "")
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }

  public PolicyCondition subject(SubjectEnum subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @ApiModelProperty(value = "")
  public SubjectEnum getSubject() {
    return subject;
  }

  public void setSubject(SubjectEnum subject) {
    this.subject = subject;
  }

  public PolicyCondition value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @ApiModelProperty(value = "")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public PolicyCondition uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @ApiModelProperty(required = true, value = "")
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyCondition policyCondition = (PolicyCondition) o;
    return Objects.equals(this.policy, policyCondition.policy) &&
        Objects.equals(this.operator, policyCondition.operator) &&
        Objects.equals(this.subject, policyCondition.subject) &&
        Objects.equals(this.value, policyCondition.value) &&
        Objects.equals(this.uuid, policyCondition.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policy, operator, subject, value, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyCondition {\n");
    
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

