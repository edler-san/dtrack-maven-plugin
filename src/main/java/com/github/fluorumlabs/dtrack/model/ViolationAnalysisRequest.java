/*
 * Copyright 2021 Artem Godin.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Dependency-Track API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.fluorumlabs.dtrack.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ViolationAnalysisRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-21T09:42:21.596Z")
public class ViolationAnalysisRequest {
  @SerializedName("component")
  private String component = null;

  @SerializedName("policyViolation")
  private String policyViolation = null;

  /**
   * Gets or Sets analysisState
   */
  @JsonAdapter(AnalysisStateEnum.Adapter.class)
  public enum AnalysisStateEnum {
    APPROVED("APPROVED"),
    
    REJECTED("REJECTED"),
    
    NOT_SET("NOT_SET");

    private String value;

    AnalysisStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnalysisStateEnum fromValue(String text) {
      for (AnalysisStateEnum b : AnalysisStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AnalysisStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnalysisStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AnalysisStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("analysisState")
  private AnalysisStateEnum analysisState = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("suppressed")
  private Boolean suppressed = null;

  public ViolationAnalysisRequest component(String component) {
    this.component = component;
    return this;
  }

   /**
   * Get component
   * @return component
  **/
  @ApiModelProperty(required = true, value = "")
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }

  public ViolationAnalysisRequest policyViolation(String policyViolation) {
    this.policyViolation = policyViolation;
    return this;
  }

   /**
   * Get policyViolation
   * @return policyViolation
  **/
  @ApiModelProperty(required = true, value = "")
  public String getPolicyViolation() {
    return policyViolation;
  }

  public void setPolicyViolation(String policyViolation) {
    this.policyViolation = policyViolation;
  }

  public ViolationAnalysisRequest analysisState(AnalysisStateEnum analysisState) {
    this.analysisState = analysisState;
    return this;
  }

   /**
   * Get analysisState
   * @return analysisState
  **/
  @ApiModelProperty(value = "")
  public AnalysisStateEnum getAnalysisState() {
    return analysisState;
  }

  public void setAnalysisState(AnalysisStateEnum analysisState) {
    this.analysisState = analysisState;
  }

  public ViolationAnalysisRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @ApiModelProperty(value = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public ViolationAnalysisRequest suppressed(Boolean suppressed) {
    this.suppressed = suppressed;
    return this;
  }

   /**
   * Get suppressed
   * @return suppressed
  **/
  @ApiModelProperty(value = "")
  public Boolean isSuppressed() {
    return suppressed;
  }

  public void setSuppressed(Boolean suppressed) {
    this.suppressed = suppressed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViolationAnalysisRequest violationAnalysisRequest = (ViolationAnalysisRequest) o;
    return Objects.equals(this.component, violationAnalysisRequest.component) &&
        Objects.equals(this.policyViolation, violationAnalysisRequest.policyViolation) &&
        Objects.equals(this.analysisState, violationAnalysisRequest.analysisState) &&
        Objects.equals(this.comment, violationAnalysisRequest.comment) &&
        Objects.equals(this.suppressed, violationAnalysisRequest.suppressed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(component, policyViolation, analysisState, comment, suppressed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViolationAnalysisRequest {\n");
    
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    policyViolation: ").append(toIndentedString(policyViolation)).append("\n");
    sb.append("    analysisState: ").append(toIndentedString(analysisState)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    suppressed: ").append(toIndentedString(suppressed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

