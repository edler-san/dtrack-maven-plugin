// Generated by delombok at Thu Mar 13 15:00:40 CET 2025
/*
 * Copyright 2021 Artem Godin.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.fluorumlabs.dtrackmavenplugin;

import com.vdurmont.semver4j.Semver;
import org.apache.maven.plugins.annotations.Parameter;
import org.yaml.snakeyaml.TypeDescription;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class PluginConfiguration {
    /**
     * Dependency-Track API URL, for example http://localhost:8081/api
     */
    @Parameter
    private String apiServer;
    /**
     * Dependency-Track API key. Must have the following permissions:
     * BOM_UPLOAD, PORTFOLIO_MANAGEMENT, PROJECT_CREATION_UPLOAD, VIEW_PORTFOLIO
     */
    @Parameter
    private String apiKey;
    /**
     * Custom project name for Dependency-Track. Uses groupId/artifactId format if not specified.
     */
    @Parameter
    private String projectName;
    /**
     * CycloneDX component type for project, defaults to library
     *
     * Possible values: application/framework/library/container/operating-system/device/firmware/file
     */
    @Parameter
    private String projectType;
    /**
     * Specifies which previous versions should be kept in Dependency-Track when
     * a new version is uploaded.
     *
     * Possible values: NONE/MAJOR/MINOR/PATCH/SUFFIX/BUILD
     */
    @Parameter
    private Semver.VersionDiff keepPreviousVersions;
    /**
     * Comma-separated list of maven scopes for dependencies that should be included in SBOM.
     *
     * Possible values: compile/provided/runtime/test/system
     */
    @Parameter
    private List<String> includedScopes;
    /**
     * Skip projects whose artifactIds contain any of specified comma-separated strings.
     */
    @Parameter
    private List<String> excludedProjects;
    /**
     * Skip projects whose artifactIds (or parent projects' artifactIds) contain any of
     * specified comma-separated strings.
     */
    @Parameter
    private List<String> excludedProjectHierarchies;
    /**
     * Additional NPM dependencies
     */
    @Parameter
    private List<NpmDependency> npmDependencies;

    public PluginConfiguration withDefaults() {
        if (includedScopes == null) {
            includedScopes = new ArrayList<>();
        }
        if (excludedProjects == null) {
            excludedProjects = new ArrayList<>();
        }
        if (excludedProjectHierarchies == null) {
            excludedProjectHierarchies = new ArrayList<>();
        }
        if (npmDependencies == null) {
            npmDependencies = new ArrayList<>();
        }
        if (keepPreviousVersions == null) {
            keepPreviousVersions = Semver.VersionDiff.BUILD;
        }
        return this;
    }

    public void mergeInto(PluginConfigurationBuilder builder) {
        if (apiServer != null) {
            builder.apiServer(apiServer);
        }
        if (apiKey != null) {
            builder.apiKey(apiKey);
        }
        if (projectName != null) {
            builder.projectName(projectName);
        }
        if (projectType != null) {
            builder.projectType(projectType);
        }
        if (keepPreviousVersions != null) {
            builder.keepPreviousVersions(keepPreviousVersions);
        }
        if (includedScopes != null) {
            builder.includedScopes = includedScopes;
        }
        if (excludedProjects != null) {
            if (builder.excludedProjects == null) {
                builder.excludedProjects = excludedProjects;
            } else {
                builder.excludedProjects.addAll(excludedProjects);
            }
        }
        if (excludedProjectHierarchies != null) {
            if (builder.excludedProjectHierarchies == null) {
                builder.excludedProjectHierarchies = excludedProjectHierarchies;
            } else {
                builder.excludedProjectHierarchies.addAll(excludedProjectHierarchies);
            }
        }
        if (npmDependencies != null) {
            if (builder.npmDependencies == null) {
                builder.npmDependencies = npmDependencies;
            } else {
                builder.npmDependencies.addAll(npmDependencies);
            }
        }
    }

    public static Optional<PluginConfiguration> readYaml(Path yamlPath) {
        if (!Files.exists(yamlPath)) {
            return Optional.empty();
        }
        Constructor constructor = new Constructor(PluginConfiguration.class);
        TypeDescription descriptor = new TypeDescription(PluginConfiguration.class);
        descriptor.addPropertyParameters("includeScopes", String.class);
        descriptor.addPropertyParameters("excludeProjects", String.class);
        descriptor.addPropertyParameters("excludeProjectHierarchies", String.class);
        descriptor.addPropertyParameters("npmDependencies", NpmDependency.class);
        constructor.addTypeDescription(descriptor);
        Yaml yaml = new Yaml(constructor);
        try {
            return Optional.of(yaml.load(String.join("\n", Files.readAllLines(yamlPath))));
        } catch (IOException ignore) {
            // ignore
            return Optional.empty();
        }
    }


    @java.lang.SuppressWarnings("all")
    public static class PluginConfigurationBuilder {
        @java.lang.SuppressWarnings("all")
        private String apiServer;
        @java.lang.SuppressWarnings("all")
        private String apiKey;
        @java.lang.SuppressWarnings("all")
        private String projectName;
        @java.lang.SuppressWarnings("all")
        private String projectType;
        @java.lang.SuppressWarnings("all")
        private Semver.VersionDiff keepPreviousVersions;
        @java.lang.SuppressWarnings("all")
        private List<String> includedScopes;
        @java.lang.SuppressWarnings("all")
        private List<String> excludedProjects;
        @java.lang.SuppressWarnings("all")
        private List<String> excludedProjectHierarchies;
        @java.lang.SuppressWarnings("all")
        private List<NpmDependency> npmDependencies;

        @java.lang.SuppressWarnings("all")
        PluginConfigurationBuilder() {
        }

        /**
         * Dependency-Track API URL, for example http://localhost:8081/api
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public PluginConfiguration.PluginConfigurationBuilder apiServer(final String apiServer) {
            this.apiServer = apiServer;
            return this;
        }

        /**
         * Dependency-Track API key. Must have the following permissions:
         * BOM_UPLOAD, PORTFOLIO_MANAGEMENT, PROJECT_CREATION_UPLOAD, VIEW_PORTFOLIO
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public PluginConfiguration.PluginConfigurationBuilder apiKey(final String apiKey) {
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Custom project name for Dependency-Track. Uses groupId/artifactId format if not specified.
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public PluginConfiguration.PluginConfigurationBuilder projectName(final String projectName) {
            this.projectName = projectName;
            return this;
        }

        /**
         * CycloneDX component type for project, defaults to library
         *
         * Possible values: application/framework/library/container/operating-system/device/firmware/file
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public PluginConfiguration.PluginConfigurationBuilder projectType(final String projectType) {
            this.projectType = projectType;
            return this;
        }

        /**
         * Specifies which previous versions should be kept in Dependency-Track when
         * a new version is uploaded.
         *
         * Possible values: NONE/MAJOR/MINOR/PATCH/SUFFIX/BUILD
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public PluginConfiguration.PluginConfigurationBuilder keepPreviousVersions(final Semver.VersionDiff keepPreviousVersions) {
            this.keepPreviousVersions = keepPreviousVersions;
            return this;
        }

        /**
         * Comma-separated list of maven scopes for dependencies that should be included in SBOM.
         *
         * Possible values: compile/provided/runtime/test/system
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public PluginConfiguration.PluginConfigurationBuilder includedScopes(final List<String> includedScopes) {
            this.includedScopes = includedScopes;
            return this;
        }

        /**
         * Skip projects whose artifactIds contain any of specified comma-separated strings.
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public PluginConfiguration.PluginConfigurationBuilder excludedProjects(final List<String> excludedProjects) {
            this.excludedProjects = excludedProjects;
            return this;
        }

        /**
         * Skip projects whose artifactIds (or parent projects' artifactIds) contain any of
         * specified comma-separated strings.
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public PluginConfiguration.PluginConfigurationBuilder excludedProjectHierarchies(final List<String> excludedProjectHierarchies) {
            this.excludedProjectHierarchies = excludedProjectHierarchies;
            return this;
        }

        /**
         * Additional NPM dependencies
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public PluginConfiguration.PluginConfigurationBuilder npmDependencies(final List<NpmDependency> npmDependencies) {
            this.npmDependencies = npmDependencies;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PluginConfiguration build() {
            return new PluginConfiguration(this.apiServer, this.apiKey, this.projectName, this.projectType, this.keepPreviousVersions, this.includedScopes, this.excludedProjects, this.excludedProjectHierarchies, this.npmDependencies);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "PluginConfiguration.PluginConfigurationBuilder(apiServer=" + this.apiServer + ", apiKey=" + this.apiKey + ", projectName=" + this.projectName + ", projectType=" + this.projectType + ", keepPreviousVersions=" + this.keepPreviousVersions + ", includedScopes=" + this.includedScopes + ", excludedProjects=" + this.excludedProjects + ", excludedProjectHierarchies=" + this.excludedProjectHierarchies + ", npmDependencies=" + this.npmDependencies + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static PluginConfiguration.PluginConfigurationBuilder builder() {
        return new PluginConfiguration.PluginConfigurationBuilder();
    }

    /**
     * Dependency-Track API URL, for example http://localhost:8081/api
     */
    @java.lang.SuppressWarnings("all")
    public String getApiServer() {
        return this.apiServer;
    }

    /**
     * Dependency-Track API key. Must have the following permissions:
     * BOM_UPLOAD, PORTFOLIO_MANAGEMENT, PROJECT_CREATION_UPLOAD, VIEW_PORTFOLIO
     */
    @java.lang.SuppressWarnings("all")
    public String getApiKey() {
        return this.apiKey;
    }

    /**
     * Custom project name for Dependency-Track. Uses groupId/artifactId format if not specified.
     */
    @java.lang.SuppressWarnings("all")
    public String getProjectName() {
        return this.projectName;
    }

    /**
     * CycloneDX component type for project, defaults to library
     *
     * Possible values: application/framework/library/container/operating-system/device/firmware/file
     */
    @java.lang.SuppressWarnings("all")
    public String getProjectType() {
        return this.projectType;
    }

    /**
     * Specifies which previous versions should be kept in Dependency-Track when
     * a new version is uploaded.
     *
     * Possible values: NONE/MAJOR/MINOR/PATCH/SUFFIX/BUILD
     */
    @java.lang.SuppressWarnings("all")
    public Semver.VersionDiff getKeepPreviousVersions() {
        return this.keepPreviousVersions;
    }

    /**
     * Comma-separated list of maven scopes for dependencies that should be included in SBOM.
     *
     * Possible values: compile/provided/runtime/test/system
     */
    @java.lang.SuppressWarnings("all")
    public List<String> getIncludedScopes() {
        return this.includedScopes;
    }

    /**
     * Skip projects whose artifactIds contain any of specified comma-separated strings.
     */
    @java.lang.SuppressWarnings("all")
    public List<String> getExcludedProjects() {
        return this.excludedProjects;
    }

    /**
     * Skip projects whose artifactIds (or parent projects' artifactIds) contain any of
     * specified comma-separated strings.
     */
    @java.lang.SuppressWarnings("all")
    public List<String> getExcludedProjectHierarchies() {
        return this.excludedProjectHierarchies;
    }

    /**
     * Additional NPM dependencies
     */
    @java.lang.SuppressWarnings("all")
    public List<NpmDependency> getNpmDependencies() {
        return this.npmDependencies;
    }

    /**
     * Dependency-Track API URL, for example http://localhost:8081/api
     */
    @java.lang.SuppressWarnings("all")
    public void setApiServer(final String apiServer) {
        this.apiServer = apiServer;
    }

    /**
     * Dependency-Track API key. Must have the following permissions:
     * BOM_UPLOAD, PORTFOLIO_MANAGEMENT, PROJECT_CREATION_UPLOAD, VIEW_PORTFOLIO
     */
    @java.lang.SuppressWarnings("all")
    public void setApiKey(final String apiKey) {
        this.apiKey = apiKey;
    }

    /**
     * Custom project name for Dependency-Track. Uses groupId/artifactId format if not specified.
     */
    @java.lang.SuppressWarnings("all")
    public void setProjectName(final String projectName) {
        this.projectName = projectName;
    }

    /**
     * CycloneDX component type for project, defaults to library
     *
     * Possible values: application/framework/library/container/operating-system/device/firmware/file
     */
    @java.lang.SuppressWarnings("all")
    public void setProjectType(final String projectType) {
        this.projectType = projectType;
    }

    /**
     * Specifies which previous versions should be kept in Dependency-Track when
     * a new version is uploaded.
     *
     * Possible values: NONE/MAJOR/MINOR/PATCH/SUFFIX/BUILD
     */
    @java.lang.SuppressWarnings("all")
    public void setKeepPreviousVersions(final Semver.VersionDiff keepPreviousVersions) {
        this.keepPreviousVersions = keepPreviousVersions;
    }

    /**
     * Comma-separated list of maven scopes for dependencies that should be included in SBOM.
     *
     * Possible values: compile/provided/runtime/test/system
     */
    @java.lang.SuppressWarnings("all")
    public void setIncludedScopes(final List<String> includedScopes) {
        this.includedScopes = includedScopes;
    }

    /**
     * Skip projects whose artifactIds contain any of specified comma-separated strings.
     */
    @java.lang.SuppressWarnings("all")
    public void setExcludedProjects(final List<String> excludedProjects) {
        this.excludedProjects = excludedProjects;
    }

    /**
     * Skip projects whose artifactIds (or parent projects' artifactIds) contain any of
     * specified comma-separated strings.
     */
    @java.lang.SuppressWarnings("all")
    public void setExcludedProjectHierarchies(final List<String> excludedProjectHierarchies) {
        this.excludedProjectHierarchies = excludedProjectHierarchies;
    }

    /**
     * Additional NPM dependencies
     */
    @java.lang.SuppressWarnings("all")
    public void setNpmDependencies(final List<NpmDependency> npmDependencies) {
        this.npmDependencies = npmDependencies;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof PluginConfiguration)) return false;
        final PluginConfiguration other = (PluginConfiguration) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$apiServer = this.getApiServer();
        final java.lang.Object other$apiServer = other.getApiServer();
        if (this$apiServer == null ? other$apiServer != null : !this$apiServer.equals(other$apiServer)) return false;
        final java.lang.Object this$apiKey = this.getApiKey();
        final java.lang.Object other$apiKey = other.getApiKey();
        if (this$apiKey == null ? other$apiKey != null : !this$apiKey.equals(other$apiKey)) return false;
        final java.lang.Object this$projectName = this.getProjectName();
        final java.lang.Object other$projectName = other.getProjectName();
        if (this$projectName == null ? other$projectName != null : !this$projectName.equals(other$projectName)) return false;
        final java.lang.Object this$projectType = this.getProjectType();
        final java.lang.Object other$projectType = other.getProjectType();
        if (this$projectType == null ? other$projectType != null : !this$projectType.equals(other$projectType)) return false;
        final java.lang.Object this$keepPreviousVersions = this.getKeepPreviousVersions();
        final java.lang.Object other$keepPreviousVersions = other.getKeepPreviousVersions();
        if (this$keepPreviousVersions == null ? other$keepPreviousVersions != null : !this$keepPreviousVersions.equals(other$keepPreviousVersions)) return false;
        final java.lang.Object this$includedScopes = this.getIncludedScopes();
        final java.lang.Object other$includedScopes = other.getIncludedScopes();
        if (this$includedScopes == null ? other$includedScopes != null : !this$includedScopes.equals(other$includedScopes)) return false;
        final java.lang.Object this$excludedProjects = this.getExcludedProjects();
        final java.lang.Object other$excludedProjects = other.getExcludedProjects();
        if (this$excludedProjects == null ? other$excludedProjects != null : !this$excludedProjects.equals(other$excludedProjects)) return false;
        final java.lang.Object this$excludedProjectHierarchies = this.getExcludedProjectHierarchies();
        final java.lang.Object other$excludedProjectHierarchies = other.getExcludedProjectHierarchies();
        if (this$excludedProjectHierarchies == null ? other$excludedProjectHierarchies != null : !this$excludedProjectHierarchies.equals(other$excludedProjectHierarchies)) return false;
        final java.lang.Object this$npmDependencies = this.getNpmDependencies();
        final java.lang.Object other$npmDependencies = other.getNpmDependencies();
        if (this$npmDependencies == null ? other$npmDependencies != null : !this$npmDependencies.equals(other$npmDependencies)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof PluginConfiguration;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $apiServer = this.getApiServer();
        result = result * PRIME + ($apiServer == null ? 43 : $apiServer.hashCode());
        final java.lang.Object $apiKey = this.getApiKey();
        result = result * PRIME + ($apiKey == null ? 43 : $apiKey.hashCode());
        final java.lang.Object $projectName = this.getProjectName();
        result = result * PRIME + ($projectName == null ? 43 : $projectName.hashCode());
        final java.lang.Object $projectType = this.getProjectType();
        result = result * PRIME + ($projectType == null ? 43 : $projectType.hashCode());
        final java.lang.Object $keepPreviousVersions = this.getKeepPreviousVersions();
        result = result * PRIME + ($keepPreviousVersions == null ? 43 : $keepPreviousVersions.hashCode());
        final java.lang.Object $includedScopes = this.getIncludedScopes();
        result = result * PRIME + ($includedScopes == null ? 43 : $includedScopes.hashCode());
        final java.lang.Object $excludedProjects = this.getExcludedProjects();
        result = result * PRIME + ($excludedProjects == null ? 43 : $excludedProjects.hashCode());
        final java.lang.Object $excludedProjectHierarchies = this.getExcludedProjectHierarchies();
        result = result * PRIME + ($excludedProjectHierarchies == null ? 43 : $excludedProjectHierarchies.hashCode());
        final java.lang.Object $npmDependencies = this.getNpmDependencies();
        result = result * PRIME + ($npmDependencies == null ? 43 : $npmDependencies.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "PluginConfiguration(apiServer=" + this.getApiServer() + ", apiKey=" + this.getApiKey() + ", projectName=" + this.getProjectName() + ", projectType=" + this.getProjectType() + ", keepPreviousVersions=" + this.getKeepPreviousVersions() + ", includedScopes=" + this.getIncludedScopes() + ", excludedProjects=" + this.getExcludedProjects() + ", excludedProjectHierarchies=" + this.getExcludedProjectHierarchies() + ", npmDependencies=" + this.getNpmDependencies() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public PluginConfiguration() {
    }

    /**
     * Creates a new {@code PluginConfiguration} instance.
     *
     * @param apiServer Dependency-Track API URL, for example http://localhost:8081/api
     * @param apiKey Dependency-Track API key. Must have the following permissions:
     * BOM_UPLOAD, PORTFOLIO_MANAGEMENT, PROJECT_CREATION_UPLOAD, VIEW_PORTFOLIO
     * @param projectName Custom project name for Dependency-Track. Uses groupId/artifactId format if not specified.
     * @param projectType CycloneDX component type for project, defaults to library
     *
     * Possible values: application/framework/library/container/operating-system/device/firmware/file
     * @param keepPreviousVersions Specifies which previous versions should be kept in Dependency-Track when
     * a new version is uploaded.
     *
     * Possible values: NONE/MAJOR/MINOR/PATCH/SUFFIX/BUILD
     * @param includedScopes Comma-separated list of maven scopes for dependencies that should be included in SBOM.
     *
     * Possible values: compile/provided/runtime/test/system
     * @param excludedProjects Skip projects whose artifactIds contain any of specified comma-separated strings.
     * @param excludedProjectHierarchies Skip projects whose artifactIds (or parent projects' artifactIds) contain any of
     * specified comma-separated strings.
     * @param npmDependencies Additional NPM dependencies
     */
    @java.lang.SuppressWarnings("all")
    public PluginConfiguration(final String apiServer, final String apiKey, final String projectName, final String projectType, final Semver.VersionDiff keepPreviousVersions, final List<String> includedScopes, final List<String> excludedProjects, final List<String> excludedProjectHierarchies, final List<NpmDependency> npmDependencies) {
        this.apiServer = apiServer;
        this.apiKey = apiKey;
        this.projectName = projectName;
        this.projectType = projectType;
        this.keepPreviousVersions = keepPreviousVersions;
        this.includedScopes = includedScopes;
        this.excludedProjects = excludedProjects;
        this.excludedProjectHierarchies = excludedProjectHierarchies;
        this.npmDependencies = npmDependencies;
    }
}
