/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vaadin.dtrack.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.reflect.TypeToken;
import com.vaadin.dtrack.ApiCallback;
import com.vaadin.dtrack.ApiClient;
import com.vaadin.dtrack.ApiException;
import com.vaadin.dtrack.ApiResponse;
import com.vaadin.dtrack.Configuration;
import com.vaadin.dtrack.Pair;
import com.vaadin.dtrack.ProgressRequestBody;
import com.vaadin.dtrack.ProgressResponseBody;

public class FindingApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public FindingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FindingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for analyzeProject
     * @param uuid The UUID of the project to analyze (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call analyzeProjectCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/finding/project/{uuid}/analyze"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call analyzeProjectValidateBeforeCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling analyzeProject(Async)");
        }
        
        com.squareup.okhttp.Call call = analyzeProjectCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Triggers Vulnerability Analysis on a specific project
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to analyze (required)
     * @return BomUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BomUploadResponse analyzeProject(UUID uuid) throws ApiException {
        ApiResponse<BomUploadResponse> resp = analyzeProjectWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Triggers Vulnerability Analysis on a specific project
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to analyze (required)
     * @return ApiResponse&lt;BomUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BomUploadResponse> analyzeProjectWithHttpInfo(UUID uuid) throws ApiException {
        com.squareup.okhttp.Call call = analyzeProjectValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BomUploadResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Triggers Vulnerability Analysis on a specific project (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to analyze (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call analyzeProjectAsync(UUID uuid, final ApiCallback<BomUploadResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = analyzeProjectValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BomUploadResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportFindingsByProject
     * @param uuid The UUID of the project (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportFindingsByProjectCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/finding/project/{uuid}/export"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call exportFindingsByProjectValidateBeforeCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling exportFindingsByProject(Async)");
        }
        
        com.squareup.okhttp.Call call = exportFindingsByProjectCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the findings for the specified project as FPF
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String exportFindingsByProject(UUID uuid) throws ApiException {
        ApiResponse<String> resp = exportFindingsByProjectWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Returns the findings for the specified project as FPF
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> exportFindingsByProjectWithHttpInfo(UUID uuid) throws ApiException {
        com.squareup.okhttp.Call call = exportFindingsByProjectValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the findings for the specified project as FPF (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportFindingsByProjectAsync(UUID uuid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportFindingsByProjectValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllFindings
     * @param showInactive Show inactive projects (optional)
     * @param severity Filter by severity (optional)
     * @param publishDateFrom Filter published from this date (optional)
     * @param publishDateTo Filter published to this date (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @param cvssv2From Filter CVSSv2 from this value (optional)
     * @param cvssv2To Filter CVSSv2 to this value (optional)
     * @param cvssv3From Filter CVSSv3 from this value (optional)
     * @param cvssv3To Filter CVSSv3 to this value (optional)
     * @param occurrencesFrom Filter occurrences in projects from this value (optional)
     * @param occurrencesTo Filter occurrences in projects to this value (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllFindingsCall(Boolean showInactive, String severity, String publishDateFrom, String publishDateTo, String textSearchField, String textSearchInput, String cvssv2From, String cvssv2To, String cvssv3From, String cvssv3To, String occurrencesFrom, String occurrencesTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/finding/grouped";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showInactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("showInactive", showInactive));
        if (severity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("severity", severity));
        if (publishDateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("publishDateFrom", publishDateFrom));
        if (publishDateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("publishDateTo", publishDateTo));
        if (textSearchField != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("textSearchField", textSearchField));
        if (textSearchInput != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("textSearchInput", textSearchInput));
        if (cvssv2From != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvssv2From", cvssv2From));
        if (cvssv2To != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvssv2To", cvssv2To));
        if (cvssv3From != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvssv3From", cvssv3From));
        if (cvssv3To != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvssv3To", cvssv3To));
        if (occurrencesFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("occurrencesFrom", occurrencesFrom));
        if (occurrencesTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("occurrencesTo", occurrencesTo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getAllFindingsValidateBeforeCall(Boolean showInactive, String severity, String publishDateFrom, String publishDateTo, String textSearchField, String textSearchInput, String cvssv2From, String cvssv2To, String cvssv3From, String cvssv3To, String occurrencesFrom, String occurrencesTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllFindingsCall(showInactive, severity, publishDateFrom, publishDateTo, textSearchField, textSearchInput, cvssv2From, cvssv2To, cvssv3From, cvssv3To, occurrencesFrom, occurrencesTo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of all findings grouped by vulnerability
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param showInactive Show inactive projects (optional)
     * @param severity Filter by severity (optional)
     * @param publishDateFrom Filter published from this date (optional)
     * @param publishDateTo Filter published to this date (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @param cvssv2From Filter CVSSv2 from this value (optional)
     * @param cvssv2To Filter CVSSv2 to this value (optional)
     * @param cvssv3From Filter CVSSv3 from this value (optional)
     * @param cvssv3To Filter CVSSv3 to this value (optional)
     * @param occurrencesFrom Filter occurrences in projects from this value (optional)
     * @param occurrencesTo Filter occurrences in projects to this value (optional)
     * @return List&lt;Finding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Finding> getAllFindings(Boolean showInactive, String severity, String publishDateFrom, String publishDateTo, String textSearchField, String textSearchInput, String cvssv2From, String cvssv2To, String cvssv3From, String cvssv3To, String occurrencesFrom, String occurrencesTo) throws ApiException {
        ApiResponse<List<Finding>> resp = getAllFindingsWithHttpInfo(showInactive, severity, publishDateFrom, publishDateTo, textSearchField, textSearchInput, cvssv2From, cvssv2To, cvssv3From, cvssv3To, occurrencesFrom, occurrencesTo);
        return resp.getData();
    }

    /**
     * Returns a list of all findings grouped by vulnerability
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param showInactive Show inactive projects (optional)
     * @param severity Filter by severity (optional)
     * @param publishDateFrom Filter published from this date (optional)
     * @param publishDateTo Filter published to this date (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @param cvssv2From Filter CVSSv2 from this value (optional)
     * @param cvssv2To Filter CVSSv2 to this value (optional)
     * @param cvssv3From Filter CVSSv3 from this value (optional)
     * @param cvssv3To Filter CVSSv3 to this value (optional)
     * @param occurrencesFrom Filter occurrences in projects from this value (optional)
     * @param occurrencesTo Filter occurrences in projects to this value (optional)
     * @return ApiResponse&lt;List&lt;Finding&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Finding>> getAllFindingsWithHttpInfo(Boolean showInactive, String severity, String publishDateFrom, String publishDateTo, String textSearchField, String textSearchInput, String cvssv2From, String cvssv2To, String cvssv3From, String cvssv3To, String occurrencesFrom, String occurrencesTo) throws ApiException {
        com.squareup.okhttp.Call call = getAllFindingsValidateBeforeCall(showInactive, severity, publishDateFrom, publishDateTo, textSearchField, textSearchInput, cvssv2From, cvssv2To, cvssv3From, cvssv3To, occurrencesFrom, occurrencesTo, null, null);
        Type localVarReturnType = new TypeToken<List<Finding>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of all findings grouped by vulnerability (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param showInactive Show inactive projects (optional)
     * @param severity Filter by severity (optional)
     * @param publishDateFrom Filter published from this date (optional)
     * @param publishDateTo Filter published to this date (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @param cvssv2From Filter CVSSv2 from this value (optional)
     * @param cvssv2To Filter CVSSv2 to this value (optional)
     * @param cvssv3From Filter CVSSv3 from this value (optional)
     * @param cvssv3To Filter CVSSv3 to this value (optional)
     * @param occurrencesFrom Filter occurrences in projects from this value (optional)
     * @param occurrencesTo Filter occurrences in projects to this value (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllFindingsAsync(Boolean showInactive, String severity, String publishDateFrom, String publishDateTo, String textSearchField, String textSearchInput, String cvssv2From, String cvssv2To, String cvssv3From, String cvssv3To, String occurrencesFrom, String occurrencesTo, final ApiCallback<List<Finding>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllFindingsValidateBeforeCall(showInactive, severity, publishDateFrom, publishDateTo, textSearchField, textSearchInput, cvssv2From, cvssv2To, cvssv3From, cvssv3To, occurrencesFrom, occurrencesTo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Finding>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllFindings1
     * @param showInactive Show inactive projects (optional)
     * @param showSuppressed Show suppressed findings (optional)
     * @param severity Filter by severity (optional)
     * @param analysisStatus Filter by analysis status (optional)
     * @param vendorResponse Filter by vendor response (optional)
     * @param publishDateFrom Filter published from this date (optional)
     * @param publishDateTo Filter published to this date (optional)
     * @param attributedOnDateFrom Filter attributed on from this date (optional)
     * @param attributedOnDateTo Filter attributed on to this date (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @param cvssv2From Filter CVSSv2 from this value (optional)
     * @param cvssv2To Filter CVSSv2 from this Value (optional)
     * @param cvssv3From Filter CVSSv3 from this value (optional)
     * @param cvssv3To Filter CVSSv3 from this Value (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllFindings1Call(Boolean showInactive, Boolean showSuppressed, String severity, String analysisStatus, String vendorResponse, String publishDateFrom, String publishDateTo, String attributedOnDateFrom, String attributedOnDateTo, String textSearchField, String textSearchInput, String cvssv2From, String cvssv2To, String cvssv3From, String cvssv3To, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/finding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showInactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("showInactive", showInactive));
        if (showSuppressed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("showSuppressed", showSuppressed));
        if (severity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("severity", severity));
        if (analysisStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisStatus", analysisStatus));
        if (vendorResponse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendorResponse", vendorResponse));
        if (publishDateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("publishDateFrom", publishDateFrom));
        if (publishDateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("publishDateTo", publishDateTo));
        if (attributedOnDateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attributedOnDateFrom", attributedOnDateFrom));
        if (attributedOnDateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attributedOnDateTo", attributedOnDateTo));
        if (textSearchField != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("textSearchField", textSearchField));
        if (textSearchInput != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("textSearchInput", textSearchInput));
        if (cvssv2From != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvssv2From", cvssv2From));
        if (cvssv2To != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvssv2To", cvssv2To));
        if (cvssv3From != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvssv3From", cvssv3From));
        if (cvssv3To != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvssv3To", cvssv3To));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getAllFindings1ValidateBeforeCall(Boolean showInactive, Boolean showSuppressed, String severity, String analysisStatus, String vendorResponse, String publishDateFrom, String publishDateTo, String attributedOnDateFrom, String attributedOnDateTo, String textSearchField, String textSearchInput, String cvssv2From, String cvssv2To, String cvssv3From, String cvssv3To, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllFindings1Call(showInactive, showSuppressed, severity, analysisStatus, vendorResponse, publishDateFrom, publishDateTo, attributedOnDateFrom, attributedOnDateTo, textSearchField, textSearchInput, cvssv2From, cvssv2To, cvssv3From, cvssv3To, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of all findings
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param showInactive Show inactive projects (optional)
     * @param showSuppressed Show suppressed findings (optional)
     * @param severity Filter by severity (optional)
     * @param analysisStatus Filter by analysis status (optional)
     * @param vendorResponse Filter by vendor response (optional)
     * @param publishDateFrom Filter published from this date (optional)
     * @param publishDateTo Filter published to this date (optional)
     * @param attributedOnDateFrom Filter attributed on from this date (optional)
     * @param attributedOnDateTo Filter attributed on to this date (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @param cvssv2From Filter CVSSv2 from this value (optional)
     * @param cvssv2To Filter CVSSv2 from this Value (optional)
     * @param cvssv3From Filter CVSSv3 from this value (optional)
     * @param cvssv3To Filter CVSSv3 from this Value (optional)
     * @return List&lt;Finding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Finding> getAllFindings1(Boolean showInactive, Boolean showSuppressed, String severity, String analysisStatus, String vendorResponse, String publishDateFrom, String publishDateTo, String attributedOnDateFrom, String attributedOnDateTo, String textSearchField, String textSearchInput, String cvssv2From, String cvssv2To, String cvssv3From, String cvssv3To) throws ApiException {
        ApiResponse<List<Finding>> resp = getAllFindings1WithHttpInfo(showInactive, showSuppressed, severity, analysisStatus, vendorResponse, publishDateFrom, publishDateTo, attributedOnDateFrom, attributedOnDateTo, textSearchField, textSearchInput, cvssv2From, cvssv2To, cvssv3From, cvssv3To);
        return resp.getData();
    }

    /**
     * Returns a list of all findings
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param showInactive Show inactive projects (optional)
     * @param showSuppressed Show suppressed findings (optional)
     * @param severity Filter by severity (optional)
     * @param analysisStatus Filter by analysis status (optional)
     * @param vendorResponse Filter by vendor response (optional)
     * @param publishDateFrom Filter published from this date (optional)
     * @param publishDateTo Filter published to this date (optional)
     * @param attributedOnDateFrom Filter attributed on from this date (optional)
     * @param attributedOnDateTo Filter attributed on to this date (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @param cvssv2From Filter CVSSv2 from this value (optional)
     * @param cvssv2To Filter CVSSv2 from this Value (optional)
     * @param cvssv3From Filter CVSSv3 from this value (optional)
     * @param cvssv3To Filter CVSSv3 from this Value (optional)
     * @return ApiResponse&lt;List&lt;Finding&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Finding>> getAllFindings1WithHttpInfo(Boolean showInactive, Boolean showSuppressed, String severity, String analysisStatus, String vendorResponse, String publishDateFrom, String publishDateTo, String attributedOnDateFrom, String attributedOnDateTo, String textSearchField, String textSearchInput, String cvssv2From, String cvssv2To, String cvssv3From, String cvssv3To) throws ApiException {
        com.squareup.okhttp.Call call = getAllFindings1ValidateBeforeCall(showInactive, showSuppressed, severity, analysisStatus, vendorResponse, publishDateFrom, publishDateTo, attributedOnDateFrom, attributedOnDateTo, textSearchField, textSearchInput, cvssv2From, cvssv2To, cvssv3From, cvssv3To, null, null);
        Type localVarReturnType = new TypeToken<List<Finding>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of all findings (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param showInactive Show inactive projects (optional)
     * @param showSuppressed Show suppressed findings (optional)
     * @param severity Filter by severity (optional)
     * @param analysisStatus Filter by analysis status (optional)
     * @param vendorResponse Filter by vendor response (optional)
     * @param publishDateFrom Filter published from this date (optional)
     * @param publishDateTo Filter published to this date (optional)
     * @param attributedOnDateFrom Filter attributed on from this date (optional)
     * @param attributedOnDateTo Filter attributed on to this date (optional)
     * @param textSearchField Filter the text input in these fields (optional)
     * @param textSearchInput Filter by this text input (optional)
     * @param cvssv2From Filter CVSSv2 from this value (optional)
     * @param cvssv2To Filter CVSSv2 from this Value (optional)
     * @param cvssv3From Filter CVSSv3 from this value (optional)
     * @param cvssv3To Filter CVSSv3 from this Value (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllFindings1Async(Boolean showInactive, Boolean showSuppressed, String severity, String analysisStatus, String vendorResponse, String publishDateFrom, String publishDateTo, String attributedOnDateFrom, String attributedOnDateTo, String textSearchField, String textSearchInput, String cvssv2From, String cvssv2To, String cvssv3From, String cvssv3To, final ApiCallback<List<Finding>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllFindings1ValidateBeforeCall(showInactive, showSuppressed, severity, analysisStatus, vendorResponse, publishDateFrom, publishDateTo, attributedOnDateFrom, attributedOnDateTo, textSearchField, textSearchInput, cvssv2From, cvssv2To, cvssv3From, cvssv3To, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Finding>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFindingsByProject
     * @param uuid The UUID of the project (required)
     * @param suppressed Optionally includes suppressed findings (optional)
     * @param source Optionally limit findings to specific sources of vulnerability intelligence (optional)
     * @param accept  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFindingsByProjectCall(UUID uuid, Boolean suppressed, String source, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/finding/project/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (suppressed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("suppressed", suppressed));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/sarif+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getFindingsByProjectValidateBeforeCall(UUID uuid, Boolean suppressed, String source, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getFindingsByProject(Async)");
        }
        
        com.squareup.okhttp.Call call = getFindingsByProjectCall(uuid, suppressed, source, accept, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of all findings for a specific project or generates SARIF file if Accept: application/sarif+json header is provided
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project (required)
     * @param suppressed Optionally includes suppressed findings (optional)
     * @param source Optionally limit findings to specific sources of vulnerability intelligence (optional)
     * @param accept  (optional)
     * @return List&lt;Finding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Finding> getFindingsByProject(UUID uuid, Boolean suppressed, String source, String accept) throws ApiException {
        ApiResponse<List<Finding>> resp = getFindingsByProjectWithHttpInfo(uuid, suppressed, source, accept);
        return resp.getData();
    }

    /**
     * Returns a list of all findings for a specific project or generates SARIF file if Accept: application/sarif+json header is provided
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project (required)
     * @param suppressed Optionally includes suppressed findings (optional)
     * @param source Optionally limit findings to specific sources of vulnerability intelligence (optional)
     * @param accept  (optional)
     * @return ApiResponse&lt;List&lt;Finding&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Finding>> getFindingsByProjectWithHttpInfo(UUID uuid, Boolean suppressed, String source, String accept) throws ApiException {
        com.squareup.okhttp.Call call = getFindingsByProjectValidateBeforeCall(uuid, suppressed, source, accept, null, null);
        Type localVarReturnType = new TypeToken<List<Finding>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of all findings for a specific project or generates SARIF file if Accept: application/sarif+json header is provided (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VIEW_VULNERABILITY&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project (required)
     * @param suppressed Optionally includes suppressed findings (optional)
     * @param source Optionally limit findings to specific sources of vulnerability intelligence (optional)
     * @param accept  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFindingsByProjectAsync(UUID uuid, Boolean suppressed, String source, String accept, final ApiCallback<List<Finding>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFindingsByProjectValidateBeforeCall(uuid, suppressed, source, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Finding>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
