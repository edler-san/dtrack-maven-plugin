/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vaadin.dtrack.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Score
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-12T17:49:40.645296700+01:00[Europe/Berlin]")

public class Score {
  @SerializedName("likelihoodScore")
  private Double likelihoodScore = null;

  @SerializedName("technicalImpactScore")
  private Double technicalImpactScore = null;

  @SerializedName("businessImpactScore")
  private Double businessImpactScore = null;

  /**
   * Gets or Sets likelihood
   */
  @JsonAdapter(LikelihoodEnum.Adapter.class)
  public enum LikelihoodEnum {
    @SerializedName("HIGH")
    HIGH("HIGH"),
    @SerializedName("MEDIUM")
    MEDIUM("MEDIUM"),
    @SerializedName("LOW")
    LOW("LOW");

    private String value;

    LikelihoodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LikelihoodEnum fromValue(String input) {
      for (LikelihoodEnum b : LikelihoodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LikelihoodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LikelihoodEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LikelihoodEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LikelihoodEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("likelihood")
  private LikelihoodEnum likelihood = null;

  /**
   * Gets or Sets technicalImpact
   */
  @JsonAdapter(TechnicalImpactEnum.Adapter.class)
  public enum TechnicalImpactEnum {
    @SerializedName("HIGH")
    HIGH("HIGH"),
    @SerializedName("MEDIUM")
    MEDIUM("MEDIUM"),
    @SerializedName("LOW")
    LOW("LOW");

    private String value;

    TechnicalImpactEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TechnicalImpactEnum fromValue(String input) {
      for (TechnicalImpactEnum b : TechnicalImpactEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TechnicalImpactEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TechnicalImpactEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TechnicalImpactEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TechnicalImpactEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("technicalImpact")
  private TechnicalImpactEnum technicalImpact = null;

  /**
   * Gets or Sets businessImpact
   */
  @JsonAdapter(BusinessImpactEnum.Adapter.class)
  public enum BusinessImpactEnum {
    @SerializedName("HIGH")
    HIGH("HIGH"),
    @SerializedName("MEDIUM")
    MEDIUM("MEDIUM"),
    @SerializedName("LOW")
    LOW("LOW");

    private String value;

    BusinessImpactEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BusinessImpactEnum fromValue(String input) {
      for (BusinessImpactEnum b : BusinessImpactEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BusinessImpactEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BusinessImpactEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BusinessImpactEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BusinessImpactEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("businessImpact")
  private BusinessImpactEnum businessImpact = null;

  public Score likelihoodScore(Double likelihoodScore) {
    this.likelihoodScore = likelihoodScore;
    return this;
  }

   /**
   * Get likelihoodScore
   * @return likelihoodScore
  **/
  @Schema(description = "")
  public Double getLikelihoodScore() {
    return likelihoodScore;
  }

  public void setLikelihoodScore(Double likelihoodScore) {
    this.likelihoodScore = likelihoodScore;
  }

  public Score technicalImpactScore(Double technicalImpactScore) {
    this.technicalImpactScore = technicalImpactScore;
    return this;
  }

   /**
   * Get technicalImpactScore
   * @return technicalImpactScore
  **/
  @Schema(description = "")
  public Double getTechnicalImpactScore() {
    return technicalImpactScore;
  }

  public void setTechnicalImpactScore(Double technicalImpactScore) {
    this.technicalImpactScore = technicalImpactScore;
  }

  public Score businessImpactScore(Double businessImpactScore) {
    this.businessImpactScore = businessImpactScore;
    return this;
  }

   /**
   * Get businessImpactScore
   * @return businessImpactScore
  **/
  @Schema(description = "")
  public Double getBusinessImpactScore() {
    return businessImpactScore;
  }

  public void setBusinessImpactScore(Double businessImpactScore) {
    this.businessImpactScore = businessImpactScore;
  }

  public Score likelihood(LikelihoodEnum likelihood) {
    this.likelihood = likelihood;
    return this;
  }

   /**
   * Get likelihood
   * @return likelihood
  **/
  @Schema(description = "")
  public LikelihoodEnum getLikelihood() {
    return likelihood;
  }

  public void setLikelihood(LikelihoodEnum likelihood) {
    this.likelihood = likelihood;
  }

  public Score technicalImpact(TechnicalImpactEnum technicalImpact) {
    this.technicalImpact = technicalImpact;
    return this;
  }

   /**
   * Get technicalImpact
   * @return technicalImpact
  **/
  @Schema(description = "")
  public TechnicalImpactEnum getTechnicalImpact() {
    return technicalImpact;
  }

  public void setTechnicalImpact(TechnicalImpactEnum technicalImpact) {
    this.technicalImpact = technicalImpact;
  }

  public Score businessImpact(BusinessImpactEnum businessImpact) {
    this.businessImpact = businessImpact;
    return this;
  }

   /**
   * Get businessImpact
   * @return businessImpact
  **/
  @Schema(description = "")
  public BusinessImpactEnum getBusinessImpact() {
    return businessImpact;
  }

  public void setBusinessImpact(BusinessImpactEnum businessImpact) {
    this.businessImpact = businessImpact;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Score score = (Score) o;
    return Objects.equals(this.likelihoodScore, score.likelihoodScore) &&
        Objects.equals(this.technicalImpactScore, score.technicalImpactScore) &&
        Objects.equals(this.businessImpactScore, score.businessImpactScore) &&
        Objects.equals(this.likelihood, score.likelihood) &&
        Objects.equals(this.technicalImpact, score.technicalImpact) &&
        Objects.equals(this.businessImpact, score.businessImpact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(likelihoodScore, technicalImpactScore, businessImpactScore, likelihood, technicalImpact, businessImpact);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Score {\n");
    
    sb.append("    likelihoodScore: ").append(toIndentedString(likelihoodScore)).append("\n");
    sb.append("    technicalImpactScore: ").append(toIndentedString(technicalImpactScore)).append("\n");
    sb.append("    businessImpactScore: ").append(toIndentedString(businessImpactScore)).append("\n");
    sb.append("    likelihood: ").append(toIndentedString(likelihood)).append("\n");
    sb.append("    technicalImpact: ").append(toIndentedString(technicalImpact)).append("\n");
    sb.append("    businessImpact: ").append(toIndentedString(businessImpact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
