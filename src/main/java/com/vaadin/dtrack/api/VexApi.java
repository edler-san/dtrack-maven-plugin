/*
 * OWASP Dependency-Track
 * REST API of OWASP Dependency-Track
 *
 * OpenAPI spec version: 4.12.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vaadin.dtrack.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.reflect.TypeToken;
import com.vaadin.dtrack.ApiCallback;
import com.vaadin.dtrack.ApiClient;
import com.vaadin.dtrack.ApiException;
import com.vaadin.dtrack.ApiResponse;
import com.vaadin.dtrack.Configuration;
import com.vaadin.dtrack.Pair;
import com.vaadin.dtrack.ProgressRequestBody;
import com.vaadin.dtrack.ProgressResponseBody;

public class VexApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public VexApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VexApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for exportProjectAsCycloneDx1
     * @param uuid The UUID of the project to export (required)
     * @param download Force the resulting VEX to be downloaded as a file (defaults to &#x27;false&#x27;) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportProjectAsCycloneDx1Call(UUID uuid, Boolean download, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/vex/cyclonedx/project/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (download != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("download", download));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.cyclonedx+json", "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call exportProjectAsCycloneDx1ValidateBeforeCall(UUID uuid, Boolean download, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling exportProjectAsCycloneDx1(Async)");
        }
        
        com.squareup.okhttp.Call call = exportProjectAsCycloneDx1Call(uuid, download, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a VEX for a project in CycloneDX format
     * &lt;p&gt;Requires permission &lt;strong&gt;VULNERABILITY_ANALYSIS&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to export (required)
     * @param download Force the resulting VEX to be downloaded as a file (defaults to &#x27;false&#x27;) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String exportProjectAsCycloneDx1(UUID uuid, Boolean download) throws ApiException {
        ApiResponse<String> resp = exportProjectAsCycloneDx1WithHttpInfo(uuid, download);
        return resp.getData();
    }

    /**
     * Returns a VEX for a project in CycloneDX format
     * &lt;p&gt;Requires permission &lt;strong&gt;VULNERABILITY_ANALYSIS&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to export (required)
     * @param download Force the resulting VEX to be downloaded as a file (defaults to &#x27;false&#x27;) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> exportProjectAsCycloneDx1WithHttpInfo(UUID uuid, Boolean download) throws ApiException {
        com.squareup.okhttp.Call call = exportProjectAsCycloneDx1ValidateBeforeCall(uuid, download, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a VEX for a project in CycloneDX format (asynchronously)
     * &lt;p&gt;Requires permission &lt;strong&gt;VULNERABILITY_ANALYSIS&lt;/strong&gt;&lt;/p&gt;
     * @param uuid The UUID of the project to export (required)
     * @param download Force the resulting VEX to be downloaded as a file (defaults to &#x27;false&#x27;) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportProjectAsCycloneDx1Async(UUID uuid, Boolean download, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportProjectAsCycloneDx1ValidateBeforeCall(uuid, download, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadVex
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadVexCall(VexSubmitRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/vex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call uploadVexValidateBeforeCall(VexSubmitRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = uploadVexCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload a supported VEX document
     * &lt;p&gt;   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified. &lt;/p&gt; &lt;p&gt;   The VEX will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;   The maximum allowed length of the &lt;code&gt;vex&lt;/code&gt; value is 20&#x27;000&#x27;000 characters.   When uploading large VEX files, the &lt;code&gt;POST&lt;/code&gt; endpoint is preferred,   as it does not have this limit. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;VULNERABILITY_ANALYSIS&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @return BomUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BomUploadResponse uploadVex(VexSubmitRequest body) throws ApiException {
        ApiResponse<BomUploadResponse> resp = uploadVexWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Upload a supported VEX document
     * &lt;p&gt;   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified. &lt;/p&gt; &lt;p&gt;   The VEX will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;   The maximum allowed length of the &lt;code&gt;vex&lt;/code&gt; value is 20&#x27;000&#x27;000 characters.   When uploading large VEX files, the &lt;code&gt;POST&lt;/code&gt; endpoint is preferred,   as it does not have this limit. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;VULNERABILITY_ANALYSIS&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @return ApiResponse&lt;BomUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BomUploadResponse> uploadVexWithHttpInfo(VexSubmitRequest body) throws ApiException {
        com.squareup.okhttp.Call call = uploadVexValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BomUploadResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a supported VEX document (asynchronously)
     * &lt;p&gt;   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified. &lt;/p&gt; &lt;p&gt;   The VEX will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;   The maximum allowed length of the &lt;code&gt;vex&lt;/code&gt; value is 20&#x27;000&#x27;000 characters.   When uploading large VEX files, the &lt;code&gt;POST&lt;/code&gt; endpoint is preferred,   as it does not have this limit. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;VULNERABILITY_ANALYSIS&lt;/strong&gt;&lt;/p&gt;
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadVexAsync(VexSubmitRequest body, final ApiCallback<BomUploadResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadVexValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BomUploadResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadVex1
     * @param project  (optional)
     * @param projectName  (optional)
     * @param projectVersion  (optional)
     * @param vex  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadVex1Call(String project, String projectName, String projectVersion, String vex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/vex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (project != null)
        localVarFormParams.put("project", project);
        if (projectName != null)
        localVarFormParams.put("projectName", projectName);
        if (projectVersion != null)
        localVarFormParams.put("projectVersion", projectVersion);
        if (vex != null)
        localVarFormParams.put("vex", vex);

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call uploadVex1ValidateBeforeCall(String project, String projectName, String projectVersion, String vex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = uploadVex1Call(project, projectName, projectVersion, vex, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload a supported VEX document
     * &lt;p&gt;   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified. &lt;/p&gt; &lt;p&gt;   The VEX will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;VULNERABILITY_ANALYSIS&lt;/strong&gt;&lt;/p&gt;
     * @param project  (optional)
     * @param projectName  (optional)
     * @param projectVersion  (optional)
     * @param vex  (optional)
     * @return BomUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BomUploadResponse uploadVex1(String project, String projectName, String projectVersion, String vex) throws ApiException {
        ApiResponse<BomUploadResponse> resp = uploadVex1WithHttpInfo(project, projectName, projectVersion, vex);
        return resp.getData();
    }

    /**
     * Upload a supported VEX document
     * &lt;p&gt;   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified. &lt;/p&gt; &lt;p&gt;   The VEX will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;VULNERABILITY_ANALYSIS&lt;/strong&gt;&lt;/p&gt;
     * @param project  (optional)
     * @param projectName  (optional)
     * @param projectVersion  (optional)
     * @param vex  (optional)
     * @return ApiResponse&lt;BomUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BomUploadResponse> uploadVex1WithHttpInfo(String project, String projectName, String projectVersion, String vex) throws ApiException {
        com.squareup.okhttp.Call call = uploadVex1ValidateBeforeCall(project, projectName, projectVersion, vex, null, null);
        Type localVarReturnType = new TypeToken<BomUploadResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a supported VEX document (asynchronously)
     * &lt;p&gt;   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the &lt;code&gt;projectName&lt;/code&gt; and &lt;code&gt;projectVersion&lt;/code&gt; must be specified. &lt;/p&gt; &lt;p&gt;   The VEX will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response&#x27;s content type will be &lt;code&gt;application/problem+json&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Requires permission &lt;strong&gt;VULNERABILITY_ANALYSIS&lt;/strong&gt;&lt;/p&gt;
     * @param project  (optional)
     * @param projectName  (optional)
     * @param projectVersion  (optional)
     * @param vex  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadVex1Async(String project, String projectName, String projectVersion, String vex, final ApiCallback<BomUploadResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadVex1ValidateBeforeCall(project, projectName, projectVersion, vex, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BomUploadResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
